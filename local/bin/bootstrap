#!/bin/sh
# shellcheck disable=SC2039

set -e

section() {
  printf "\\033[0;34m%s\\033[0m\\n" "$@"
}

endsection() {
  printf "\\n"
}

info() {
  printf "\\033[0;32m%s\\033[0m\\n" "$@"
}

important() {
  printf "\\033[0;35m%s\\033[0m\\n" "$@"
}

error() {
  printf "\\033[0;31m%s\\033[0m\\n" "$@"
  exit 1
}

getshell() {
  case $(uname) in
    Darwin)
      dscacheutil -q user -a name "$USER" | awk '/shell:/{print $2}'
      ;;
    *)
      getent passwd "$USER" | awk -F: '{print $NF}'
      ;;
  esac
}

selectversion() {
  awk -v major="$1" -v minor="$2" -v patch="$3" -F '.' '
    /^[ \t]*[0-9]+\.[0-9]+\.[0-9]+[ \t]*$/ {
      if ((major != "" && major != $1) ||
          (minor != "" && minor != $2) ||
          (patch != "" && patch != $3))
      {
        next
      }

      current = ($1 * 100 + $2) * 100 + $3
      if (current > max) {
        max = current
        chosen = $0
      }
    }
    END {
      gsub(/^[ \t]+/, "", chosen)
      gsub(/[ \t]+$/, "", chosen)
      print chosen
    }'
}

git_sync() {
  local url=$1
  local path=$2

  if [ -d "$path" ]; then
    git -C "$path" pull
  else
    git clone --depth 1 --recurse-submodules --shallow-submodules "$url" "$path"
  fi
}

if [ -z "$LANG" ] || [ "$LANG" = C.UTF-8 ]; then
  export LANG="en_US.UTF-8"
fi

if [ -z "$XDG_CONFIG_HOME" ]; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi
if [ -z "$XDG_DATA_HOME" ]; then
  export XDG_DATA_HOME="$HOME/.local/share"
fi
if [ -z "$XDG_CACHE_HOME" ]; then
  export XDG_CACHE_HOME="$HOME/.cache"
fi

#
# Base System
#

important "Provisioning base system and environment..."


section "Packages"
  case $(uname) in
    Linux)
      BLD="autoconf bison build-essential ccache clang cmake pkgconf"
      LIB="libbz2-dev libffi-dev libgdbm-dev libncurses-dev libreadline-dev libsqlite3-dev libssl-dev liblzma-dev libyaml-dev zlib1g-dev"
      USR="cmatrix curl exuberant-ctags fish fortune gdb git git-lfs gnupg htop jq lftp libfile-mimeinfo-perl mosh neofetch neovim python3-dev python3-venv shellcheck socat stow tig tmux unzip vlock whois xdg-utils"

      INSTALLED=$(dpkg-query -f '${binary:Package}\n' -W)
      ;;
    FreeBSD)
      BLD="ccache cmake gcc gmake pkgconf"
      LIB="libssh2 openssl sqlite3"
      USR="bash cmatrix coreutils curl fish gdb git git-lfs gnupg htop jq lftp mosh neofetch neovim p5-File-MimeInfo pinentry-curses python python3 hs-ShellCheck socat tig tmux stow universal-ctags unzip vlock whois"

      INSTALLED=$(pkg info -q)
      ;;
    Darwin)
      BLD="ccache cmake"
      LIB="readline libffi libyaml openssl zlib"
      USR="cmatrix coreutils ctags curl findutils fish fortune gdb git git-lfs gnupg htop jq lftp mosh neofetch neovim pinentry-mac python shellcheck socat stow tmux unzip xz"

      INSTALLED=$(brew list)
      ;;
    *)
      error "Unsupported operating system."
      ;;
  esac

  for pkg in $BLD $LIB $USR; do
    if ! echo "$INSTALLED" | grep -Fwq "$pkg"; then
      PKGS="${PKGS:+$PKGS }$pkg"
    fi
  done

  if [ -n "$PKGS" ]; then
    if [ -z "$ROOTLESS" ]; then
      case $(uname) in
        Linux)
          info "Installing standard packages with apt..."
          sudo sh -c "apt-get install -y $PKGS"
          ;;
        FreeBSD)
          info "Installing standard packages with pkg..."
          su root -c "pkg install -y $PKGS"
          ;;
        Darwin)
          info "Installing standard packages with brew..."
          sh -c "brew install $PKGS"
          ;;
      esac
    else
      info "Unable to install the following packages without root:"
      echo "$PKGS"
    fi
  else
    info "All standard packages are installed."
  fi
endsection


section "fish"
  fish=$(command -v fish)
  if [ ! "$(getshell)" = "$fish" ]; then
    if grep -Fxq "$fish" /etc/shells; then
      info "Adding $fish to /etc/shells..."
      echo "$fish" | sudo tee -a /etc/shells
    fi

    info "Changing login shell to fish..."
    chsh -s "$fish"
  fi

  if [ ! -f "$XDG_CONFIG_HOME/fish/functions/fisher.fish" ]; then
    info "Fetching fisher..."
    curl -L https://git.io/fisher > "$XDG_CONFIG_HOME/fish/functions/fisher.fish"
  else
    info "Updating fisher..."
    fish -c 'fisher self-update'
  fi

  info "Syncing fish plugins using fisher..."
  fish -c 'fisher'
endsection


#
# Toolchain Setup
#

important "Setting up toolchains..."


section "Golang"
  export GOENV_VERSION=
  if [ -z "$GOENV_ROOT" ]; then
    export GOENV_ROOT="$XDG_DATA_HOME/goenv"
  fi

  info "Syncing goenv..."
  git_sync https://github.com/syndbg/goenv "$GOENV_ROOT"

  export PATH="$GOENV_ROOT/bin:$PATH"
  eval "$(goenv init -)"

  GOLANG_VERSION=$(goenv install -l | selectversion)
  if ! goenv versions | grep -Fq "$GOLANG_VERSION"; then
    info "Installing Golang $GOLANG_VERSION..."
    goenv install -s "$GOLANG_VERSION"
    info "Activating Golang $GOLANG_VERSION..."
    goenv global "$GOLANG_VERSION"
  fi

  if [ -z "$GOPATH" ]; then
    export GOPATH="$XDG_DATA_HOME/go"
  fi

  go_get() {
    local target=$1

    info "Fetching $target using go get..."
    go get -u "$target"
  }

  go_get "golang.org/x/lint/golint"
  go_get "github.com/nsf/gocode"
  go_get "github.com/sourcegraph/go-langserver"
endsection


section "Node.js"
  export NODENV_VERSION=
  if [ -z "$NODENV_ROOT" ]; then
    export NODENV_ROOT="$XDG_DATA_HOME/nodenv"
  fi

  info "Syncing nodenv..."
  git_sync https://github.com/nodenv/nodenv "$NODENV_ROOT"
  git_sync https://github.com/nodenv/node-build "$NODENV_ROOT/plugins/node-build"
  git_sync https://github.com/nodenv/nodenv-package-rehash "$NODENV_ROOT/plugins/nodenv-package-rehash"

  export PATH="$NODENV_ROOT/bin:$PATH"
  eval "$(nodenv init -)"

  NODEJS_VERSION=$(nodenv install -l | selectversion)
  if ! nodenv versions | grep -Fq "$NODEJS_VERSION"; then
    info "Installing Node.js $NODEJS_VERSION..."
    nodenv install -s "$NODEJS_VERSION"
    info "Activating Node.js $NODEJS_VERSION..."
    nodenv global "$NODEJS_VERSION"
  fi

  info "Updating npm packages..."
  npm update -g

  NPM_INSTALLED=$(npm ls -g --depth 0)
  npm_install() {
    local target=$1

    if ! echo "$NPM_INSTALLED" | grep -Fq "$target"; then
      info "Installing $target using npm..."
      npm install -g "$target"
    fi
  }

  npm_install "flow-language-server"
  npm_install "lerna"
  npm_install "pnpm"
  npm_install "yarn"
endsection


section "Python"
  export PYENV_VERSION=
  if [ -z "$PYENV_ROOT" ]; then
    export PYENV_ROOT="$XDG_DATA_HOME/pyenv"
  fi

  info "Syncing pyenv..."
  git_sync https://github.com/pyenv/pyenv "$PYENV_ROOT"
  git_sync https://github.com/pyenv/pyenv-virtualenv "$PYENV_ROOT/plugins/pyenv-virtualenv"

  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"

  PYTHON_VERSIONS=$(pyenv install -l)
  PYENV_INSTALLED=$(pyenv versions)

  PYTHON2_VERSION=$(echo "$PYTHON_VERSIONS" | selectversion 2)
  if ! echo "$PYENV_INSTALLED" | grep -Fq "$PYTHON2_VERSION"; then
    info "Installing Python $PYTHON2_VERSION..."
    pyenv install -s "$PYTHON2_VERSION"
  fi
  PYTHON3_VERSION=$(echo "$PYTHON_VERSIONS" | selectversion 3)
  if ! echo "$PYENV_INSTALLED" | grep -Fq "$PYTHON3_VERSION"; then
    info "Installing Python $PYTHON3_VERSION..."
    pyenv install -s "$PYTHON3_VERSION"
  fi
  if ! pyenv global | grep -Fq "$PYTHON2_VERSION" ||
     ! pyenv global | grep -Fq "$PYTHON3_VERSION"; then
    info "Activating Python $PYTHON3_VERSION and $PYTHON2_VERSION..."
    pyenv global "$PYTHON3_VERSION" "$PYTHON2_VERSION"
  fi

  for python in $(pyenv versions --bare --skip-aliases);  do
    for target in $(PYENV_VERSION=$python pip list --outdated --format=freeze | awk -F== '{print $1}'); do
      info "Updating $target ($python)..."
      PYENV_VERSION=$python pip install -U "$target"
    done
  done

  if [ -z "$PIPX_HOME" ]; then
    export PIPX_HOME="$XDG_DATA_HOME/pipx/venvs"
  fi
  if [ -z "$PIPX_BIN_DIR" ]; then
    export PIPX_BIN_DIR="$XDG_DATA_HOME/pipx/bin"
  fi
  export PATH="$PIPX_BIN_DIR:$PATH"

  if ! command -v pipx >/dev/null; then
    info "Installing pipx..."
    curl -L https://git.io/get-pipx | python3 - --no-modify-path
  else
    info "Updating pipx packages..."
    pipx upgrade-all
  fi

  PIPX_INSTALLED=$(pipx list)
  pipx_install() {
    local target=$1
    local spec=$2

    if ! echo "$PIPX_INSTALLED" | grep -Fq "$target"; then
      info "Installing $target using pipx..."
      if [ -n "$spec" ]; then
        pipx install --spec "$spec" "$target"
      else
        pipx install "$target"
      fi
    fi
  }

  pipx_install "black"
  pipx_install "flake8"
  pipx_install "mypy"
  pipx_install "pipenv"
  pipx_install "pylint"
  pipx_install "python-language-server" "python-language-server[all]"
  pipx_install "rwt"
endsection


section "Ruby"
  export RBENV_VERSION=
  if [ -z "$RBENV_ROOT" ]; then
    export RBENV_ROOT="$XDG_DATA_HOME/rbenv"
  fi

  info "Syncing rbenv..."
  git_sync https://github.com/rbenv/rbenv "$RBENV_ROOT"
  git_sync https://github.com/rbenv/ruby-build "$RBENV_ROOT/plugins/ruby-build"

  export PATH="$RBENV_ROOT/bin:$PATH"
  eval "$(rbenv init -)"

  RUBY_VERSION="$(rbenv install -l | selectversion)"
  if ! rbenv versions | grep -Fq "$RUBY_VERSION"; then
    info "Installing Ruby $RUBY_VERSION..."
    rbenv install -s "$RUBY_VERSION"
    info "Activating Ruby $RUBY_VERSION..."
    rbenv global "$RUBY_VERSION"
  fi

  info "Updating gem packages..."
  gem update --system && gem update

  GEM_INSTALLED=$(gem list --no-versions)
  gem_install() {
    local target=$1

    if ! echo "$GEM_INSTALLED" | grep -Fq "$target"; then
      info "Installing $target using gem..."
      gem install "$target"
    fi
  }
endsection


section "Rust"
  if [ -z "$RUSTUP_HOME" ]; then
    export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
  fi
  if [ -z "$CARGO_HOME" ]; then
    export CARGO_HOME="$XDG_DATA_HOME/cargo"
  fi

  export PATH="$CARGO_HOME/bin:$PATH"

  if command -v rustup >/dev/null; then
    info "Updating Rust and rustup..."
    rustup update
  else
    info "Installing rustup and Rust..."
    curl https://sh.rustup.rs | sh -s -- -y --no-modify-path
    info "Adding additional toolchain components..."
    rustup component add rust-src rust-analysis rls-preview clippy-preview rustfmt-preview llvm-tools-preview
  fi

  info "Generating rustup fish completion..."
  rustup completions fish > "$XDG_CONFIG_HOME/fish/completions/rustup.fish"

  if command -v cargo-install-update >/dev/null; then
    info "Updating cargo packages..."
    cargo install-update -a -g
  fi

  CARGO_INSTALLED=$(cargo install --list)
  cargo_install() {
    local target=$1
    local git=$2

    if ! echo "$CARGO_INSTALLED" | grep -Eq "^$target"; then
      CARGO_TARGET_DIR=$(mktemp -d)
      export CARGO_TARGET_DIR

      trap 'rm -rf "$CARGO_TARGET_DIR"' EXIT

      info "Installing $target using cargo..."
      cargo install "$target" ${git:+--git "$git"}

      if [ -d "$CARGO_TARGET_DIR/release/build" ]; then
        local completion
        completion=$(find "$CARGO_TARGET_DIR/release/build" -name '*.fish')
        if [ -n "$completion" ]; then
          info "Installing fish completion for $target..."
          cp "$completion" "$XDG_CONFIG_HOME/fish/completions"
        fi
      fi

      rm -rf "$CARGO_TARGET_DIR"
      trap - EXIT
    fi
  }

  cargo_install "cargo-binutils"
  cargo_install "cargo-bloat"
  cargo_install "cargo-expand"
  cargo_install "cargo-outdated"
  cargo_install "cargo-sweep"
  cargo_install "cargo-tree"
  cargo_install "cargo-update"
  cargo_install "cargo-watch"
endsection


#
# Tools and Utilities
#

important "Setting up tools and utilities..."


section "CLI"
  pipx_install "asciinema"
  cargo_install "bat"
  cargo_install "hyperfine"
  go_get "github.com/simeji/jid/cmd/jid"
  pipx_install "shell-functools"
  go_get "mvdan.cc/xurls/cmd/xurls"
  cargo_install "watchexec"


  if ! command -v ngrok >/dev/null; then
    info "Installing ngrok..."

    goversion=$(go version | awk '{print $4}')
    GOOS=${goversion%/*}
    GOARCH=${goversion#*/}

    curl "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-$GOOS-$GOARCH.zip" | funzip > "$HOME/.local/bin/ngrok"
    chmod +x "$HOME/.local/bin/ngrok"
  else
    info "Updating ngrok..."
    ngrok update
  fi
endsection


section "File"
  cargo_install "exa"
  cargo_install "fd-find"
  cargo_install "ripgrep"
  go_get "github.com/boyter/scc"
  cargo_install "tokei"
endsection


section "GDB"
  pipx_install "gdbgui"

  info "Syncing gdb-dashboard..."
  git_sync https://github.com/cyrus-and/gdb-dashboard "$XDG_DATA_HOME/gdb-dashboard"
endsection


section "Git"
  npm_install "diff-so-fancy"
  go_get "github.com/mkchoi212/fac"
  npm_install "git-open"
  npm_install "git-recent"
  npm_install "git-standup"
  go_get "github.com/github/hub"
  cargo_install "git-interactive-rebase-tool"
  pipx_install "legit"
  go_get "github.com/nishanths/license"

  case $(uname) in
    Linux)
      if [ ! -f "$HOME/.local/bin/git-credential-netrc" ]; then
        cp -f /usr/share/doc/git/contrib/credential/netrc/git-credential-netrc "$HOME/.local/bin/git-credential-netrc"
        chmod +x "$HOME/.local/bin/git-credential-netrc"
      fi
      ;;
    FreeBSD)
      if [ ! -L "$HOME/.local/bin/git-credential-netrc" ]; then
        ln -sf /usr/local/share/git-core/contrib/credential/netrc/git-credential-netrc "$HOME/.local/bin/git-credential-netrc"
      fi
    ;;
  esac

  mkdir -p "$XDG_DATA_HOME/tig"
endsection


section "fzf"
  go_get "github.com/junegunn/fzf"

  if [ ! -L "$HOME/.local/bin/fzf-tmux" ]; then
    info "Linking fzf-tmux..."
    ln -sf "$GOPATH/src/github.com/junegunn/fzf/bin/fzf-tmux" "$HOME/.local/bin/fzf-tmux"
  fi
endsection


section "GnuPG"
  if [ -z "$GNUPGHOME" ]; then
    export GNUPGHOME="$HOME/.gnupg"
  fi

  if [ ! -f "$GNUPGHOME/gpg-agent.conf" ]; then
    info "Configuring gpg-agent..."
    echo "pinentry-program $HOME/.local/bin/pinentry" > "$GNUPGHOME/gpg-agent.conf"
  fi
endsection


section "(n)vim"
  for pair in neovim2:$PYTHON2_VERSION neovim3:$PYTHON3_VERSION; do
    venv=$(echo "$pair" | cut -d: -f1)
    vers=$(echo "$pair" | cut -d: -f2)

    if ! echo "$PYENV_INSTALLED" | grep -Fq "$vers/envs/$venv"; then
      info "Creating $venv ($vers) virtual environment..."
      pyenv uninstall -f "$venv"
      pyenv virtualenv "$vers" "$venv"
      PYENV_VERSION=$vers pip install pynvim
    fi
  done

  npm_install "neovim"
  gem_install "neovim"
  pipx_install "neovim-remote"
  cargo_install "pack" "https://github.com/maralla/pack"
  pipx_install "vim-vint"

  export VIM_CONFIG_PATH="$XDG_CONFIG_HOME/nvim"
  if [ ! -L "$VIM_CONFIG_PATH/.pack" ]; then
    ln -sf packfiles "$VIM_CONFIG_PATH/.pack"
  fi

  if [ ! -d "$VIM_CONFIG_PATH/pack" ];  then
    info "Installing neovim plugins using pack..."
    pack install
  else
    info "Updating neovim plugins using pack..."
    pack update
  fi
endsection

important "Done! Restart your shell!"
