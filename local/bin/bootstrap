#!/bin/sh
# shellcheck disable=SC2039

set -e

section() {
  printf "\\033[0;34m%s\\033[0m\\n" "$@"
}

endsection() {
  printf "\\n"
}

info() {
  printf "\\033[0;32m%s\\033[0m\\n" "$@"
}

important() {
  printf "\\033[0;35m%s\\033[0m\\n" "$@"
}

error() {
  printf "\\033[0;31m%s\\033[0m\\n" "$@"
  exit 1
}

getshell() {
  local shell
  if command -v dscacheutil >/dev/null; then
    shell=$(dscacheutil -q user -a name "$USER" | awk '/shell:/{print $2}')
  else
    shell=$(getent passwd "$USER" | awk -F: '{print $NF}')
  fi

  basename "$shell"
}

selectversion() {
  awk -v major="$1" -v minor="$2" -v patch="$3" -F '.' '
    /^[ \t]*[0-9]+\.[0-9]+\.[0-9]+[ \t]*$/ {
      if ((major != "" && major != $1) ||
          (minor != "" && minor != $2) ||
          (patch != "" && patch != $3))
      {
        next
      }

      current = ($1 * 100 + $2) * 100 + $3
      if (current > max) {
        max = current
        chosen = $0
      }
    }
    END {
      gsub(/^[ \t]+/, "", chosen)
      gsub(/[ \t]+$/, "", chosen)
      print chosen
    }'
}

#
# System
#

UNAME=$(uname)


section "Packages"
  case $UNAME in
    Linux)
      if [ "$(awk -F= '/^ID=/{print $2}' /etc/os-release)" = "ubuntu" ]; then
        if [ -z "$(find /etc/apt/sources.list.d/ -iname 'martin-frost-ubuntu-thoughtbot-rcm-*.list')" ]; then
          info "Setting up rcm Ubuntu repo..."
          sudo add-apt-repository ppa:martin-frost/thoughtbot-rcm
        fi
      else
        if [ ! -f "/etc/apt/sources.list.d/thoughtbot.list" ]; then
          info "Setting up rcm Debian repo..."
          sudo sh -c 'echo "deb http://apt.thoughtbot.com/debian stable main" > /etc/apt/sources.list.d/thoughtbot.list'
          wget https://apt.thoughtbot.com/thoughtbot.gpg.key -qO- | sudo apt-key add -
          sudo apt-get update
        fi
      fi

      BLD="autoconf bison build-essential ccache clang cmake pkgconf"
      LIB="libbz2-dev libffi-dev libgdbm-dev libncurses-dev libreadline-dev libsqlite3-dev libssl-dev liblzma-dev libyaml-dev zlib1g-dev"
      USR="cloc curl exuberant-ctags fish gdb gnupg htop lftp mosh neovim rcm shellcheck socat tig tmux unzip vim whois"

      INSTALLED=$(dpkg-query -f '${binary:Package}\n' -W)
      ;;
    FreeBSD)
      BLD="ccache cmake gcc gmake pkgconf"
      LIB="libssh2 ncurses openssl sqlite3"
      USR="bash cloc coreutils curl fish gdb gnupg htop lftp mosh neovim pinentry-curses hs-ShellCheck rcm socat tig tmux universal-ctags unzip vim whois"

      INSTALLED=$(pkg info -q)
      ;;
    Darwin)
      if [ ! -e "/usr/local/Homebrew/Library/Taps/thoughtbot/homebrew-formulae" ]; then
        info "Setting up rcm tap..."
        brew tap thoughtbot/formulae
      fi

      BLD="ccache cmake"
      LIB="readline zlib"
      USR="cloc coreutils ctags curl fish gdb gnupg htop lftp mosh neovim pinentry-mac rcm reattach-to-user-namespace shellcheck socat tmux unzip vim xz"

      INSTALLED=$(brew list)
      ;;
    *)
      error "Unsupported operating system."
      ;;
  esac

  for pkg in $BLD $LIB $USR; do
    if ! echo "$INSTALLED" | grep -Fw "$pkg" >/dev/null; then
      PKGS="$PKGS $pkg"
    fi
  done

  if [ -n "$PKGS" ]; then
    case $UNAME in
      Linux)
        info "Installing standard packages with apt..."
        sudo sh -c "apt-get install -y $PKGS"
        ;;
      FreeBSD)
        info "Installing standard packages with pkg..."
        su root -c "pkg install -y $PKGS"
        ;;
      Darwin)
        info "Installing standard packages with brew..."
        sh -c "brew install $PKGS"
        ;;
    esac
  else
    info "All standard packages are installed."
  fi
endsection


section "terminfo"
  export TERMINFO="$HOME/.terminfo"

  if [ ! -f "$HOME/.terminfo.src" ]; then
    info "Downloading latest terminfo database..."
    curl https://invisible-mirror.net/archives/ncurses/terminfo.src.gz -fL | gunzip > "$HOME/.terminfo.src"
    info "Compiling terminfo..."
    tic -x "$HOME/.terminfo.src"
  else
    info "Local terminfo database installed. Delete to update."
  fi
endsection


#
# Environment
#

section "Golang"
  GOENV_ROOT="$HOME/.goenv"

  if [ -d "$GOENV_ROOT" ]; then
    info "Updating goenv..."
    git -C "$GOENV_ROOT" pull
  else
    info "Installing goenv..."
    git clone https://github.com/syndbg/goenv "$GOENV_ROOT"
  fi

  export PATH="$GOENV_ROOT/bin:$PATH"
  eval "$(goenv init -)"

  info "Checking latest Golang version..."
  GOLANG_VERSION=$(goenv install -l | selectversion)
  if ! goenv versions | grep -F "$GOLANG_VERSION" >/dev/null; then
    info "Installing Golang $GOLANG_VERSION..."
    goenv install -s "$GOLANG_VERSION"
    info "Activating Golang $GOLANG_VERSION..."
    goenv global "$GOLANG_VERSION"
  fi

  if [ -z "$GOPATH" ]; then
    export GOPATH="$HOME/.local/go"
  fi

  GOGET_INSTALLED=$(go list ...)
  go_get() {
    local target="$1"

    if echo "$GOGET_INSTALLED" | grep -F "$target" > /dev/null; then
      info "Updating $target using go get..."
      go get -u "$target"
    else
      info "Installing $target using go get..."
      go get "$target"
    fi
  }

  go_get "golang.org/x/lint/golint"
  go_get "github.com/nsf/gocode"
  go_get "github.com/sourcegraph/go-langserver"
endsection


section "Node.js"
  NODENV_ROOT="$HOME/.nodenv"

  if [ -d "$NODENV_ROOT" ]; then
    info "Updating nodenv..."
    git -C "$NODENV_ROOT" pull
    git -C "$NODENV_ROOT/plugins/node-build" pull
  else
    info "Installing nodenv..."
    git clone https://github.com/nodenv/nodenv "$NODENV_ROOT"
    git clone https://github.com/nodenv/node-build "$NODENV_ROOT/plugins/node-build"
  fi

  export PATH="$NODENV_ROOT/bin:$PATH"
  eval "$(nodenv init -)"

  info "Checking latest Node.js version..."
  NODEJS_VERSION=$(nodenv install -l | selectversion)
  if ! nodenv versions | grep -F "$NODEJS_VERSION" >/dev/null; then
    info "Installing Node.js $NODEJS_VERSION..."
    nodenv install -s "$NODEJS_VERSION"
    info "Activating Node.js $NODEJS_VERSION..."
    nodenv global "$NODEJS_VERSION"
  fi

  info "Updating npm..."
  npm update -g npm

  NPM_INSTALLED=$(npm ls -g --depth 0)
  npm_install() {
    local target="$1"

    if echo "$NPM_INSTALLED" | grep -F "$target" >/dev/null; then
      info "Updating $target using npm..."
      npm update -g "$target"
    else
      info "Installing $target using npm..."
      npm install -g "$target"
    fi
  }

  npm_install "flow-language-server"
  npm_install "pnpm"
  npm_install "yarn"
endsection


section "Python"
  PYENV_ROOT="$HOME/.pyenv"

  if [ -d "$PYENV_ROOT" ]; then
    info "Updating pyenv..."
    git -C "$PYENV_ROOT" pull
  else
    info "Installing pyenv..."
    git clone https://github.com/pyenv/pyenv "$PYENV_ROOT"
  fi

  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"

  info "Checking latest Python versions..."
  PYTHON_VERSIONS=$(pyenv install -l)
  PYENV_INSTALLED=$(pyenv versions)

  PYTHON2_VERSION=$(echo "$PYTHON_VERSIONS" | selectversion 2)
  if ! echo "$PYENV_INSTALLED" | grep -F "$PYTHON2_VERSION" >/dev/null; then
    info "Installing Python $PYTHON2_VERSION..."
    pyenv install -s "$PYTHON2_VERSION"
  fi
  PYTHON3_VERSION=$(echo "$PYTHON_VERSIONS" | selectversion 3)
  if ! echo "$PYENV_INSTALLED" | grep -F "$PYTHON3_VERSION" >/dev/null; then
    info "Installing Python $PYTHON3_VERSION..."
    pyenv install -s "$PYTHON3_VERSION"
  fi
  if ! pyenv global | grep -F "$PYTHON2_VERSION" >/dev/null &&
     ! pyenv global | grep -F "$PYTHON3_VERSION" >/dev/null; then
    info "Activating Python $PYTHON3_VERSION and $PYTHON2_VERSION..."
    pyenv global "$PYTHON3_VERSION" "$PYTHON2_VERSION"
  fi

  for target in $(pip2 list --outdated --format=freeze | awk -F== '{print $1}'); do
    info "Updating $target (Python 2)..."
    pip2 install -U "$target"
  done
  for target in $(pip3 list --outdated --format=freeze | awk -F== '{print $1}'); do
    info "Updating $target (Python 3)..."
    pip3 install -U "$target"
  done

  if [ -z "$PIPX_HOME" ]; then
    export PIPX_HOME="$HOME/.local/pipx/venvs"
  fi
  if [ -z "$PIPX_BIN_DIR" ]; then
    export PIPX_BIN_DIR="$HOME/.local/pipx/bin"
  fi
  export PATH="$PIPX_BIN_DIR:$PATH"

  if [ -e "$PIPX_HOME/pipx/bin/python3" ]; then
    info "Updating pipx..."
    pipx upgrade pipx
  else
    if [ -d "$PIPX_HOME" ]; then
      info "Python interpreter missing. Reinstalling pipx and managed packages..."
      rm -rf "$PIPX_HOME"
    else
      info "Installing pipx..."
    fi
    curl https://raw.githubusercontent.com/cs01/pipx/master/get-pipx.py -fsSL | python3 - --no-modify-path
  fi

  PIPX_INSTALLED=$(pipx list)
  pipx_install() {
    local target="$1"
    shift
    local additional_targets="$*"

    if echo "$PIPX_INSTALLED" | grep -F "$target" >/dev/null; then
      info "Updating $target using pipx..."
      pipx upgrade "$target"
    else
      info "Installing $target using pipx..."
      pipx install "$target"
    fi

    local uptodate
    local outdated
    local pip="$PIPX_HOME/$target/bin/pip"
    if [ -n "$additional_targets" ]; then
      uptodate=$($pip list --uptodate --format=freeze)
      outdated=$($pip list --outdated --format=freeze)
      for atarget in $additional_targets; do
        if echo "$outdated" | grep -F "$atarget" >/dev/null; then
          info "Updating $atarget in $target's environment..."
          $pip install -U "$atarget"
        elif ! echo "$uptodate" | grep -F "$atarget" >/dev/null; then
          info "Installing $atarget into $target's environment..."
          $pip install "$atarget"
        fi
      done
    fi
  }

  pipx_install "autopep8"
  pipx_install "black"
  pipx_install "flake8"
  pipx_install "mypy"
  pipx_install "pipenv"
  pipx_install "pylint"
  pipx_install "python-language-server" "autopep8" "mccabe" "pycodestyle" "pydocstyle" "pyflakes" "rope" "yapf"
endsection


section "Ruby"
  RBENV_ROOT="$HOME/.rbenv"

  if [ -d "$RBENV_ROOT" ]; then
    info "Updating rbenv..."
    git -C "$RBENV_ROOT" pull
    git -C "$RBENV_ROOT/plugins/ruby-build" pull
  else
    info "Installing rbenv..."
    git clone https://github.com/rbenv/rbenv "$RBENV_ROOT"
    git clone https://github.com/rbenv/ruby-build "$RBENV_ROOT/plugins/ruby-build"
  fi

  export PATH="$RBENV_ROOT/bin:$PATH"
  eval "$(rbenv init -)"

  info "Checking latest Ruby version..."
  RUBY_VERSION="$(rbenv install -l | selectversion)"
  if ! rbenv versions | grep -F "$RUBY_VERSION" >/dev/null; then
    info "Installing Ruby $RUBY_VERSION..."
    rbenv install -s "$RUBY_VERSION"
    info "Activating Ruby $RUBY_VERSION..."
    rbenv global "$RUBY_VERSION"
  fi
endsection


section "Rust"
  export PATH="$HOME/.cargo/bin:$PATH"

  if command -v rustup >/dev/null; then
    info "Updating nightly Rust..."
    rustup update
  else
    info "Setting up nightly Rust..."
    curl https://sh.rustup.rs -fsSL | sh -s -- -y --default-toolchain nightly --no-modify-path
    info "Installing Rust components..."
    rustup component add rust-src rust-analysis rls-preview clippy-preview rustfmt-preview llvm-tools-preview
  fi

  CARGO_INSTALLED=$(cargo install --list)
  cargo_install() {
    local target="$1"
    local git="$2"

    (
      CARGO_BUILD_TARGET_DIR=$(mktemp -d "${TMPDIR:-/tmp}/cargo.XXXXXXXXX")
      export CARGO_BUILD_TARGET_DIR

      trap '{ rm -rf "$CARGO_BUILD_TARGET_DIR"; }' EXIT

      if echo "$CARGO_INSTALLED" | grep -Eq "^$target"; then
        info "Updating $target using cargo..."
        cargo install-update ${git:+-g} "$target"
      else
        info "Installing $target using cargo..."
        cargo install "$target" ${git:+--git "$git"}
      fi

      if [ -d "$CARGO_BUILD_TARGET_DIR/release/build" ]; then
        local completion
        completion=$(find "$CARGO_BUILD_TARGET_DIR/release/build" -name '*.fish')
        if [ -n "$completion" ]; then
          info "Installing fish completion for $target..."
          cp "$completion" "$HOME/.config/fish/completions"
        fi
      fi
    )
  }

  cargo_install "cargo-binutils"
  cargo_install "cargo-bloat"
  cargo_install "cargo-expand"
  cargo_install "cargo-outdated"
  cargo_install "cargo-tree"
  cargo_install "cargo-update"
  cargo_install "cargo-watch"
  cargo_install "racer"
endsection


#
# Tools
#

section "dotfiles"
  export RCRC="$HOME/.dotfiles/rcrc"

  info "Linking dotfiles with rcup..."
  rcup
endsection


section "fish"
  if [ ! "$(getshell)" = 'fish' ]; then
    info "Changing login shell to fish..."

    shell=$(command -v fish)
    if [ "$UNAME" = 'FreeBSD' ]; then
      su root -c "chsh -s $USER $shell"
    else
      sudo chsh -s "$shell" "$USER"
    fi
  fi

  if [ ! -f "$HOME/.config/fish/functions/fisher.fish" ]; then
    info "Installing fisher..."
    curl https://git.io/fisher -fsSLo "$HOME/.config/fish/functions/fisher.fish"
  fi

  info "Installing and updating fish plugins using fisher..."
  fish -c fisher
endsection


section "Vim"
  if ! command -v neovim-node-host >/dev/null; then
    info "Installing Node.js Neovim provider..."
    npm install -g neovim
  fi
  if ! python2 -c "import neovim" 2>/dev/null; then
    info "Installing Python 2 Neovim provider..."
    python2 -m pip install -U neovim
  fi
  if ! python3 -c "import neovim" 2>/dev/null; then
    info "Installing Python 3 Neovim provider..."
    python3 -m pip install -U neovim
  fi
  if ! command -v neovim-ruby-host >/dev/null; then
    info "Installing Ruby Neovim provider..."
    gem install neovim
  fi

  pipx_install "neovim-remote"
  pipx_install "vim-vint"
  cargo_install "pack" "https://github.com/maralla/pack"

  if ! [ -e "$HOME/.vim/pack" ];  then
    info "Installing Vim plugins using pack..."
    pack install
  else
    info "Updating Vim plugins using pack..."
    pack update
  fi
endsection


section "CLI"
  go_get "github.com/github/hub"
  go_get "github.com/junegunn/fzf"
  go_get "github.com/nishanths/license"
  go_get "github.com/simeji/jid/cmd/jid"
  go_get "mvdan.cc/xurls/cmd/xurls"
  npm_install "diff-so-fancy"
  npm_install "git-open"
  pipx_install "asciinema"
  pipx_install "gdbgui"
  pipx_install "legit"
  cargo_install "exa"
  cargo_install "fd-find"
  cargo_install "hyperfine"
  cargo_install "ripgrep"
  cargo_install "tokei"

  if [ -f "$HOME/.gdbinit" ]; then
    info "Updating gdb-dashboard..."
  else
    info "Installing gdb-dashboard..."
  fi
  curl https://raw.githubusercontent.com/cyrus-and/gdb-dashboard/master/.gdbinit -fsSLo "$HOME/.gdbinit"

  if [ -f "$HOME/.local/bin/fzf-tmux" ]; then
    info "Updating fzf-tmux..."
  else
    info "Installing fzf-tmux..."
    trap '{ chmod +x "$HOME/.local/bin/fzf-tmux"; }' EXIT
  fi
  curl https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-tmux -fsSLo "$HOME/.local/bin/fzf-tmux"
endsection

important "Done! Restart your shell!"
