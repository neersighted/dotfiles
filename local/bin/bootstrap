#!/bin/sh
# shellcheck disable=SC2039

set -e

section() {
  printf "\\n\\033[0;34m%s\\033[0m\\n" "$@"
}

endsection() {
  :
}

info() {
  printf "\\033[0;32m%s\\033[0m\\n" "$@"
}

important() {
  printf "\\033[0;35m%s\\033[0m\\n" "$@"
}

error() {
  printf "\\033[0;31m%s\\033[0m\\n" "$@"
  exit 1
}

getshell() {
  local shell
  if command -v dscacheutil >/dev/null; then
    shell=$(dscacheutil -q user -a name "$USER" | grep shell | cut -d: -f2)
  else
    shell=$(getent passwd "$USER" | awk -F: '{print $NF}')
  fi

  basename "$shell"
}


important "Bootstrapping environment..."

#
# System
#

section "Packages"
  if command -v apt-get >/dev/null; then
    bld="autoconf bison build-essential ccache clang cmake pkgconf"
    lib="libbz2-dev libffi-dev libgdbm-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev libssl-dev libyaml-dev zlib1g-dev"
    usr="exuberant-ctags fish gnupg2 htop mosh neovim shellcheck tig tmux unzip vim"

    info "Installing packages with apt..."
    sudo sh -c "apt-get install -y $bld $lib $usr"
  elif command -v pkg >/dev/null; then
    bld="ccache cmake gcc gmake pkgconf"
    lib="libssh2 openssl sqlite3"
    usr="bash coreutils curl fish gnupg htop mosh neovim pinentry-curses hs-shellcheck tig tmux universal-ctags unzip vim"

    info "Installing packages with pkg..."
    su root -c "pkg install -y $bld $lib $usr"
  elif command -v brew >/dev/null; then
    bld="ccache cmake"
    lib="libedit zlib"
    usr="coreutils ctags fish gnupg htop mosh neovim pinentry-mac reattach-to-user-namespace shellcheck tmux unzip vim"

    info "Installing packages with brew..."
    sh -c "brew install $bld $lib $usr"
  else
    error "No package manager found. Is this a supported system?"
  fi
endsection

#
# Environment
#

# asdf
section "asdf"
  if [ ! -d "$HOME/.asdf" ]; then
    info "Installing asdf..."
    git clone https://github.com/asdf-vm/asdf "$HOME/.asdf"
  fi

  if ! command -v asdf >/dev/null; then
    export PATH="$HOME/.asdf/bin:$HOME/.asdf/shims:$PATH"
  fi

  info "Updating asdf to latest tag..."
  asdf update

  install_asdf_plugin() {
    local name="$1"
    local url="$2"

    if ! asdf plugin-list | grep -Fq "$name"; then
      info "Installing $name support for asdf..."
      asdf plugin-add "$name" "$url"
    else
      info "Updating asdf $name support..."
      asdf plugin-update "$name"
    fi
  }

  install_asdf_language() {
    local language="$1"
    shift

    asdf list-all "$language" >/dev/null # TODO: needed?

    local versions
    for query in "$@"; do
      version=$(asdf list-all "$language" | grep -E "$query" | tail -1)
      versions="$versions $version"

      if ! asdf list "$language" | grep -Fq "$version"; then
        info "Installing $language $version..."
        asdf install "$language" "$version"
        asdf reshim "$language" "$version"
      fi
    done

    info "Activating $language$versions..."
    # shellcheck disable=SC2086
    asdf global "$language" $versions
  }


  # asdf plugins
  install_asdf_plugin "golang" "https://github.com/kennyp/asdf-golang"
  install_asdf_plugin "nodejs" "https://github.com/neersighted/asdf-nodejs"
  install_asdf_plugin "python" "https://github.com/neersighted/asdf-python"
  install_asdf_plugin "ruby"   "https://github.com/neersighted/asdf-ruby"
endsection


section "Go"
  install_asdf_language "golang" "^1.10.[0-9]$"

  install_go_tool() {
    local target="$1"

    info "Installing/updating $target using go get..."
    go get -u "$target"
  }

  install_go_tool "github.com/golang/lint/golint"
  install_go_tool "github.com/nsf/gocode"
  install_go_tool "github.com/sourcegraph/go-langserver"
endsection


section "Node.js"
  install_asdf_language "nodejs" "^9.[0-9]+.[0-9]$"

  install_npm_tool() {
    local target="$1"

    info "Installing/updating $target using npm..."
    npm install -g "$target"
  }

  install_npm_tool "flow-language-server"
  install_npm_tool "pnpm"
  install_npm_tool "yarn"
endsection


section "Python"
  install_asdf_language "python" "^3.6.[0-9]+$" "^2.7.[0-9]+$"

  if ! command -v pipsi >/dev/null; then
    if ! [ -e "$HOME/.local/bin/pipsi" ]; then
      info "Installing pipsi..."
      curl http://git.io/get-pipsi -fsSL | python - --src=git+https://github.com/mitsuhiko/pipsi.git
      echo "{\"name\": \"pipsi\", \"version\": \"0.10.dev\", \"scripts\": [\"$HOME/.local/bin/pipsi\"]}" > "$HOME/.local/venvs/pipsi/package_info.json" # FIXME: remove when pipsi bug is fixed
    fi

    export PATH="$HOME/.local/bin:$PATH"
  fi

  install_python_tool() {
    local target="$1"
    shift
    local additional_targets="$*"

    if ! pipsi list | grep -F "$target" >/dev/null; then
      info "Installing $target using pipsi..."
      pipsi install "$target"
    else
      info "Updating $target using pipsi..."
      pipsi upgrade "$target"
    fi

    if [ -n "$additional_targets" ]; then
      info "Installing/updating $additional_targets in $target environment..."
      for atarget in $additional_targets; do
        "$HOME/.local/venvs/$target/bin/pip" install -U "$atarget"
      done
    fi
  }

  install_python_tool "autopep8"
  install_python_tool "black"
  install_python_tool "flake8"
  install_python_tool "mypy"
  install_python_tool "pipenv"
  install_python_tool "pylint"
  install_python_tool "python-language-server" "autopep8" "mccabe" "pycodestyle" "pydocstyle" "pyflakes" "rope" "yapf"
endsection


section "Ruby"
  install_asdf_language "ruby" "^2.5.[0-9]+$"
endsection


section "Rust"
  if ! command -v rustup >/dev/null; then
    info "Setting up Rust toolchain..."
    curl https://sh.rustup.rs -fsSL | sh -s -- -y --no-modify-path --default-toolchain nightly

    export PATH="$HOME/.cargo/bin:$PATH"
    rustup component add rust-src rustfmt-preview rls-preview
  else
    info "Updating Rust toolchain..."
    rustup update
  fi

  install_rust_tool() {
    local target="$1"
    local git="$2"

    (
      CARGO_BUILD_TARGET_DIR=$(mktemp -d "${TMPDIR:-/tmp}/cargo.XXXXXXXXX")
      export CARGO_BUILD_TARGET_DIR

      trap '{ rm -rf "$CARGO_BUILD_TARGET_DIR"; }' EXIT

      if cargo install --list | grep -Eq "^$target"; then
        info "Updating $target using cargo install-update..."
        cargo install-update ${git:+-g} "$target"
      else
        info "Installing $target using cargo install..."
        cargo install "$target" ${git:+--git "$git"}
      fi

      if [ -d "$CARGO_BUILD_TARGET_DIR/release/build" ]; then
        local completion
        completion=$(find "$CARGO_BUILD_TARGET_DIR/release/build" -name '*.fish')
        if [ -n "$completion" ]; then
          info "Installing fish completion for $target..."
          cp "$completion" "$HOME/.config/fish/completions"
        fi
      fi
    )
  }

  install_rust_tool "cargo-bloat"
  install_rust_tool "cargo-expand"
  install_rust_tool "cargo-outdated"
  install_rust_tool "cargo-tree"
  install_rust_tool "cargo-update"
  install_rust_tool "cargo-watch"
  install_rust_tool "clippy" "https://github.com/rust-lang-nursery/rust-clippy"
  install_rust_tool "racer"
endsection


#
# Tools
#

section "fish"
  if [ ! "$(getshell)" = 'fish' ]; then
    info "Changing login shell to fish..."

    shell=$(command -v fish)
    if [ "$(uname)" = 'FreeBSD' ]; then
      su root -c "chsh -s $USER $shell"
    else
      sudo chsh -s "$shell" "$USER"
    fi
  fi

  if [ ! -e "$HOME/.config/fish/functions/fisher.fish" ]; then
    info "Bootstrapping fisher..."
    curl https://git.io/fisher -fsSLo "$HOME/.config/fish/functions/fisher.fish"
  fi

  info "Installing fish plugins using fisher..."
  fish -c fisher
endsection


section "Vim/Neovim"
  if ! command -v neovim-node-host >/dev/null; then
    info "Installing Node.js Neovim provider..."
    npm install -g neovim
  fi
  if ! python2 -c "import neovim" 2>/dev/null; then
    info "Installing Python 2 Neovim provider..."
    python2 -m pip install -U neovim
  fi
  if ! python3 -c "import neovim" 2>/dev/null; then
    info "Installing Python 3 Neovim provider..."
    python3 -m pip install -U neovim
  fi
  if ! command -v neovim-ruby-host >/dev/null; then
    info "Installing Ruby Neovim provider..."
    gem install neovim
  fi

  install_python_tool "neovim-remote"
  install_python_tool "vim-vint"
  install_rust_tool "pack" "https://github.com/maralla/pack"

  if ! [ -e "$HOME/.vim/pack" ];  then
    info "Bootstrapping Vim plugins using pack install..."
    pack install
  fi
endsection


section "CLI Tools"
  install_go_tool "github.com/github/hub"
  install_go_tool "github.com/junegunn/fzf"
  install_go_tool "github.com/nishanths/license"
  install_go_tool "github.com/simeji/jid/cmd/jid"
  install_go_tool "mvdan.cc/xurls/cmd/xurls"
  install_npm_tool "diff-so-fancy"
  install_npm_tool "git-open"
  install_python_tool "asciinema"
  install_python_tool "legit"
  install_rust_tool "exa"
  install_rust_tool "fd-find"
  #install_rust_tool "hyperfine"
  install_rust_tool "ripgrep"
  install_rust_tool "tokei"

  info "Installing/updating gdb-dashboard..."
  curl https://raw.githubusercontent.com/cyrus-and/gdb-dashboard/master/.gdbinit -fsSLo "$HOME/.gdbinit"

  info "Installing/updating fzf-tmux..."
  curl https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-tmux -fsSLo "$HOME/.local/bin/fzf-tmux"
  chmod +x "$HOME/.local/bin/fzf-tmux"
endsection

printf "\\n"
important "Reshimming all asdf installs..."
asdf plugin-list | xargs -I{} asdf reshim {}

important "Done! Restart your shell!"
