#!/bin/sh
# shellcheck disable=SC2039

SELECTION="${1:-clipboard}"

yank_command() {
  if [ "$(uname)" = "Darwin" ]; then
    if command -v reattach-to-user-namespace >/dev/null; then
      echo "reattach-to-user-namespace pbcopy"
    else
      echo "pbcopy"
    fi
  else
    if uname -r | grep -Fq "Microsoft"; then
      if command -v win32yank >/dev/null; then
        echo "win32yank -i --crlf"
      elif command -v win32yank.exe >/dev/null; then
        echo "win32yank.exe -i --crlf"
      else
        echo "clip.exe"
      fi
    else
      if [ -n "$DISPLAY" ]; then
        if command -v xsel >/dev/null; then
          # detect original/conrad
          if xsel --version >/dev/null 2>&1; then
            echo "xsel -i --$SELECTION"
          else
            echo "xsel -c -s $SELECTION"
          fi
        elif command -v xclip >/dev/null; then
          echo "xclip -i -selection $SELECTION"
        fi
      else
        echo "tmux load-buffer -"
      fi
    fi
  fi
}

paste_command() {
  if [ "$(uname)" = "Darwin" ]; then
    if command -v reattach-to-user-namespace >/dev/null; then
      echo "reattach-to-user-namespace pbpaste"
    else
      echo "pbpaste"
    fi
  else
    if uname -r | grep -Fq "Microsoft"; then
      if command -v win32yank >/dev/null; then
        echo "win32yank -o --lf"
      elif command -v win32yank.exe >/dev/null; then
        echo "win32yank.exe -o --lf"
      else
        echo "powershell.exe -Command Get-Clipboard"
      fi
    else
      if [ -n "$DISPLAY" ]; then
        if command -v xsel >/dev/null; then
          # detect original/conrad
          if xsel --version >/dev/null 2>&1; then
            echo "xsel -o --$SELECTION"
          else
            echo "xsel -p -s $SELECTION"
          fi
        elif command -v xclip >/dev/null; then
          echo "xclip -o -selection $SELECTION"
        fi
      else
        echo "tmux save-buffer -"
      fi
    fi
  fi
}

case $0 in
*yankee-yank ) COMMAND=$(yank_command) ;;
*yankee-paste) COMMAND=$(paste_command) ;;
*            ) echo "called as invalid script: $0" >&2; exit 1 ;;
esac

if [ -n "$COMMAND" ]; then
  exec sh -c "$COMMAND"
fi

echo "could not find valid command" >&2
exit 1
