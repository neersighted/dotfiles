#!/usr/bin/env python3

from decimal import Decimal
from operator import itemgetter
from re import compile as regex
from shutil import get_terminal_size
from subprocess import run
from sys import argv
from tempfile import NamedTemporaryFile

COLUMNS, _ = get_terminal_size()

NVIM_RE = regex(r'nvimprofile$')
SCRIPT_RE = regex(r'^(\s*\d{3}\.\d{3}){3}: sourcing')
PLUGIN_RE = regex(r'/pack/[^\0\/]+/start/([^\0\/]+)/((?:[^\0\/]+/?)+)')
VIMRC_RE = regex(r'/\.vim/|/\.config/nvim/|/\.local/share/nvim/|g?vimrc')
RUNTIME_RE = regex(r'/runtime/|/share/vim/vim\d+')
READY_RE = regex(r'^(\d{3}\.\d{3})\s+\d{3}\.\d{3}: editing files in windows$')


def histogram(title, pairs):
    total_time = sum(pairs.values())
    max_time = max(pairs.values())

    name_width = max((len(n) for n in pairs))
    labels = {n: f'{n.rjust(name_width)}: {t}ms' for n, t in pairs.items()}
    label_width = max((len(l) for l in labels.values()))

    print(f' {title} ({total_time}ms) '.center(COLUMNS, '-'))

    for name, time in sorted(pairs.items(), key=itemgetter(1), reverse=True):
        label = labels[name].ljust(label_width + 1)
        histo = '*' * int((time / max_time) * (COLUMNS - len(label)))

        print(label + histo)


def main():
    plugins = {}
    vimrc = {}
    runtime = {}

    with NamedTemporaryFile(mode='r') as log:
        if NVIM_RE.search(argv[0]):
            vim = 'nvim'
        else:
            vim = 'vim'

        print(f' {vim} Startup Profile '.center(COLUMNS, '='))
        run([vim, '--startuptime', log.name, '-c', 'q'])

        for line in log:
            if not SCRIPT_RE.match(line):
                ready = READY_RE.match(line)
                if ready:
                    total = Decimal(ready[1])
                continue

            _, _, time, _, script = line.split()
            time = Decimal(time.rstrip(':'))

            plugin = PLUGIN_RE.search(script)
            vimrc_match = VIMRC_RE.search(script)
            runtime_match = RUNTIME_RE.search(script)

            if plugin:
                if plugin[1] not in plugins:
                    plugins[plugin[1]] = Decimal(0)
                plugins[plugin[1]] += time
            elif vimrc_match:
                vimrc[script] = time
            elif runtime_match:
                runtime[script] = time
            else:
                print(f'Unrecognized script: {script}')

    histogram('RUNTIME', runtime)
    histogram('VIMRC', vimrc)
    histogram('PLUGINS', plugins)

    print(f' {vim} ready in {total}ms '.center(COLUMNS, '='))


if __name__ == '__main__':
    main()
