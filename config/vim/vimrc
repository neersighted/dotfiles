"
" Profiling
"

if has('vim_starting') && has('reltime')
    let startup = reltime()
    autocmd VimEnter * let ready = reltime(startup) | redraw | echo reltimestr(ready)
endif

"
" System Detection
"

" Platform Variables {{{
  let s:is_tmux = exists($TMUX)

  let s:is_windows = has('win32') || has('win64')
  let s:is_cygwin  = has('win32unix')
  let s:is_mac     = match(system('uname'), 'Darwin') != -1

  let s:is_gui    = has('gui_running')
  let s:is_gtk    = has('gui_gtk2')
  let s:is_macvim = has('gui_macvim')
" }}}

"
" Functions
"

" Platform Functions {{{
  " Check if a directory is empty/does not exist.
  function! s:is_empty(dir)
    return empty(glob(expand(a:dir)))
  endfunction

  " Make sure a directory exists.
  function! s:ensure(dir)
    let dir = expand(a:dir)

    if s:is_empty(dir) && !isdirectory(dir)
      try
        call mkdir(target, 'p')
      catch
        " On some platforms mkdir() does not exist.
        silent execute '!mkdir -p '.dir
      endtry
    endif
  endfunction

  " Get the (platform dependant) cache location.
  function! s:get_cache(for)
    if s:is_windows && !s:is_cygwin
      let l:dir = '~/Application Data/Vim'
    elseif s:is_mac
      let l:dir = '~/Library/Application Support/Vim'
    else
      if empty($XDG_DATA_HOME)
        let l:dir= '~/.local/share/vim'
      else
        let l:dir = $XDG_DATA_HOME.'/vim'
      endif
    endif

    let dir = resolve(expand(l:dir . '/' . a:for))

    call s:ensure(dir)
    return dir
  endfunction
" }}}

" Utility Functions {{{
  " Execute a command without moving or clobbering search.
  " Stolen from bling.vim <3
  function! Preserve(command)
    " Preserve the position and search.
    let old_search = @/
    let cursor_l = line('.')
    let cursor_c = col('.')

    " Do the dirty work.
    execute a:command

    " Restore the old data.
    let @/ = old_search
    call cursor(cursor_l, cursor_c)
  endfunction

  function! KillTrailingWhitespace()
      call Preserve('%s/\s\+$//e')
  endfunction
" }}}

"
" Plugins
"

let s:bundle_cache = s:get_cache('bundle')
let s:neobundle = s:bundle_cache.'/neobundle.vim'

" Install Neobundle {{{
  " Clone Neobundle if we can.
  if s:is_empty(s:bundle_cache)
    if executable('git')
      silent execute '!git clone git://github.com/Shougo/neobundle.vim 's:neobundle
    else
      if confirm("Git is not installed. Continue?", "&Yes\n&No", 2) == 2
        quit
      endif
    endif
  endif
" }}}

" Run Neobundle {{{
  " Set defaults.
  set nocompatible

  " Load Neobundle.
  silent execute 'set runtimepath+='.s:neobundle
  call neobundle#begin(s:bundle_cache)
" }}}

if neobundle#has_cache()
  NeoBundleLoadCache
else
  " Plugins {{{
    " Libraries {{{
      " Neobundle itself.
      NeoBundleFetch 'Shougo/neobundle.vim'

      " Unified fuzzy interface to any (implemented) source.
      NeoBundle 'Shougo/unite.vim'

      " Background and asynchronous process support.
      NeoBundle 'Shougo/vimproc'
      " A pseudo-command line.
      NeoBundle 'junegunn/vim-pseudocl'
      NeoBundle 'Shougo/vimproc', {
        \ 'lazy': 1,
        \ 'build': {
        \   'windows': 'make -f make_mingw32.mak',
        \   'cygwin':  'make -f make_cygwin.mak',
        \   'mac':     'make -f make_mac.mak',
        \   'unix':    'make -f make_unix.mak'
        \ }
      \ }
      " Async adapters for running Vim's compiler plugins, or arbitrary commands.
      NeoBundle 'tpope/vim-dispatch', {
        \ 'lazy': 1,
        \ 'autoload': {
        \   'commands': ['Dispatch', 'Start', 'Make', 'FocusDispatch', 'Focus']
        \ }
      \ }


      " Repeat support for arbitrary plugins.
      NeoBundle 'tpope/vim-repeat', {
        \ 'lazy': 1,
        \ 'autoload': {'mappings': ['.']}
      \ }
      " A library for making text objects.
      NeoBundle 'kana/vim-textobj-user', {
        \ 'lazy': 1
      \ }
    " }}}

    " Fixes/Tweaks {{{
      " Sane defaults.
      NeoBundle 'tpope/vim-sensible'

      " Auto-detect indent settings.
      NeoBundle 'tpope/vim-sleuth'
      " Auto detect the build command.
      NeoBundle 'johnsyweb/vim-makeshift'
      " Let Tmux notify Vim of changed environmental variables.
      NeoBundle 'buztard/vim-nomad'

      " Close buffers without changing the layout.
      NeoBundle 'moll/vim-bbye'

      " Smooth scrolling.
      NeoBundle 'terryma/vim-smooth-scroll'
      " Fix terminal key sequences.
      NeoBundle 'drmikehenry/vim-fixkey'

      " Make Vim's build in character info command support more things.
      NeoBundle 'tpope/vim-characterize'
 
      " Show markers for indents.
      NeoBundle 'Yggdroot/indentLine'
    " }}}

    " Unite Sources {{{
      NeoBundleLazy 'Shougo/unite-help', {
        \ 'depends': ['Shougo/unite.vim'],
        \ 'autoload': {'unite_sources': ['help']}
      \ }
      NeoBundleLazy 'Shougo/neomru.vim', {
        \ 'depends': ['Shougo/unite.vim'],
        \ 'autoload': {'unite_sources': ['file_mru', 'directory_mru', 'neomru/file', 'neomru/directory']}
      \ }
      NeoBundleLazy 'thinca/vim-unite-history', {
        \ 'depends': ['Shougo/unite.vim'],
        \ 'autoload': {'unite_sources': ['history/command', 'history/search']}
      \ }
    " }}}

    " Editing {{{
      " Commentary adds key bindings to easily comment and uncomment code.
      NeoBundle 'tpope/vim-commentary'
      " Align text with verbs!
      NeoBundle 'tommcdo/vim-lion'

      " Surround.vim adds support for manipulating the surroundings of a text object,
      " such as adding/removing quotes, replacing in brackets, and more.
      NeoBundle 'tpope/vim-surround'
      " Automatically close quotes, parenthesis, braces, and other delimiters.
      NeoBundle 'Raimondi/delimitMate'
      " Automatically end block constructs in supported languages.
      NeoBundle 'tpope/vim-endwise'

      " A Vim implementation of Emac's 'kill ring', allowing you to cycle through
      " yanks.
      NeoBundle 'maxbrunsfeld/vim-yankstack'
      " Force a paste mode regardless of the yank type.
      NeoBundle 'UnconditionalPaste'
      " Replace a text object with a register.
      NeoBundle 'ReplaceWithRegister'

      " Split and join statements intelligently.
      NeoBundle 'AndrewRadev/splitjoin.vim'
      " Speeddating adds support for incrementing and decrementing dates.
      NeoBundle 'tpope/vim-speeddating'
      " Handy bracket-prefixed pairs of mappings that @tpope finds useful.
      NeoBundle 'tpope/vim-unimpaired'

      " Multiple cursors and selection.
      NeoBundle 'terryma/vim-multiple-cursors'
      " Abolish brings bracket substitutions to Vim abbreviations, searches, and
      " substitutions.
      NeoBundle 'tpope/vim-abolish'
    " }}}

    " Lint {{{
      " Lint and syntax checking for many languages.
      NeoBundle 'scrooloose/syntastic'
    " }}}

    " Completion {{{
      " Completion engine supporting almost anything. Also it's fast.
      NeoBundleLazy 'Shougo/neocomplete.vim', {
        \ 'depends': ['Shougo/unite.vim'],
        \ 'autoload': {'insert': 1}
      \ }

      " Python completion source.
      NeoBundleLazy 'davidhalter/jedi-vim', {
        \ 'autoload': {'filetypes': ['python']}
      \ }

      " A powerful snippet engine, with support for nested snippets.
      NeoBundleLazy 'Shougo/neosnippet', {
        \ 'depends': ['Shougo/neocomplete.vim'],
        \ 'autoload': {'insert': 1}
      \ }
      NeoBundle 'Shougo/neosnippet-snippets', {
        \ 'depends': ['Shougo/neosnippet']
      \ }
      " A snippets collection for Snipmate/UltiSnips.
      NeoBundle 'honza/vim-snippets', {
        \ 'depends': ['Shougo/neosnippet']
      \ }
    " }}}

    " Movement {{{
      " A better /...
      NeoBundle 'junegunn/vim-oblique'

      " EasyMotion displays possible motions as hints, making it easier to navigate
      " files.
      NeoBundle 'Lokaltog/vim-easymotion'
      " Seek adds a two-character seek binding.
      NeoBundle 'goldfeld/vim-seek'
    " }}}

    " Navigation {{{
      NeoBundle 'Shougo/vimshell', {
        \ 'depends': ['Shougo/vimproc']
      \ }
      " A file browser and sidebar for Vim.
      NeoBundle 'Shougo/vimfiler'
      " A ctags browser as a sidebar.
      NeoBundle 'majutsushi/tagbar'

      " Quick access to a file browser.
      NeoBundle 'tpope/vim-vinegar', {
        \ 'depends': ['Shougo/vimfiler']
      \ }

      " Various utilities for *nix (and maybe Windows) systems, such as renaming and
      " deleting files, or changing file permissions.
      NeoBundle 'tpope/vim-eunuch'
    " }}}

    " Collaboration {{{
      " A Git wrapper so awesome, it should be illegal.  Add mappings for working
      " with Git meta-files and diffs, and wrap common Git commands.
      NeoBundle 'tpope/vim-fugitive'
      " A Fugitive extension to browse commits (basically gitk).
      NeoBundle 'int3/vim-extradite'
      " A Fugitive extension to manage and merge/rebase branches.
      NeoBundle 'idanarye/vim-merginal'

      " EditorConfig is a universal editor configuration language.  It helps
      " developers maintain constant coding styles across editors and platforms.
      NeoBundle 'editorconfig/editorconfig-vim'
    " }}}

    " UI {{{
      " A nice status screen.
      NeoBundle 'mhinz/vim-startify'

      " A sweet, lightweight status bar.
      NeoBundle 'bling/vim-airline'
      " Derive Tmux's status line from Vim.
      NeoBundle 'edkolev/tmuxline.vim'

      " Signature.vim adds visual marks in the gutter, as well as shortcuts for
      " managing marks.
      NeoBundle 'kshenoy/vim-signature'
      " Signify adds diff marks to the gutter.
      NeoBundle 'airblade/vim-gitgutter'
    " }}}

    " Support {{{
      " A combination of common syntax and support files.
      NeoBundle 'sheerun/vim-polyglot'

      " Bundler, the Ruby dependency manager.
      NeoBundleLazy 'tpope/vim-bundler', {
        \ 'autoload': {'filetypes': 'ruby'}
      \ }
      " Fish is a non-POSIX compatible shell for the 21st century.
      NeoBundleLazy 'dag/vim-fish', {
        \ 'autoload': {'filetypes': 'fish'}
      \ }
      " GnuPG support in Vim.
      NeoBundle 'jamessan/vim-gnupg'
      " Tools for working with Node.js.
      NeoBundleLazy 'moll/vim-node', {
        \ 'autoload': {'filetypes': 'javascript'}
      \ }
      " Tools for working with Ruby on Rails.
      NeoBundleLazy 'tpope/vim-rails', {
        \ 'autoload': {'filetypes': 'ruby'}
      \ }
      " Tools for working with virtualenv.
      NeoBundleLazy 'jmcantrell/vim-virtualenv', {
        \ 'autoload': {'filetypes': 'python'}
      \ }
    " }}}

    " Colors {{{
      " The best colorscheme, ever.
      NeoBundle 'altercation/vim-colors-solarized'
    " }}}

    " Unused {{{
    " }}}
  " }}}
  NeoBundleSaveCache
endif

" End Neobundle {{{
  NeoBundleCheck
  call neobundle#end()
" }}}

"
" Settings
"

" Setup {{{
  " Set up and clear my autocmmand group.
  augroup vimrc
    autocmd!
  augroup end
" }}}

" Input {{{
  " Timeout {{{
  " Make escape/keybinds faster.
  set ttimeoutlen=50 timeoutlen=300
" }}}

" Mouse {{{
" Enable the mouse, but hide it when typing.
set mouse=a mousehide
" }}}

" Keyboard {{{
" Fix the Mac option key.
if s:is_macvim
  set macmeta
endif
" }}}
" }}}

" Output {{{
  " Allow backgrounding buffers.
  set hidden

  " Assume a fast TTY.
  set ttyfast
" }}}

" Editing {{{
  " Search {{{
    " Enable escape characters.
    set magic
    " Show searches as they are typed.
    set hlsearch incsearch
  " }}}

  " Selection {{{
    " Use the system clipboard.
    set clipboard=autoselect
    if has("unnamedplus")
        set clipboard+=unnamedplus
    else
        set clipboard+=unnamed
    endif

    " Allow the cursor to go beyond the line and to make true blocks.
    set virtualedit=onemore,block

    if neobundle#tap('vim-yankstack')
      function! neobundle#hooks.on_post_source(bundle)
        call yankstack#setup() " Yankstack compatibility...
      endfunction

      call neobundle#untap()
    endif

    if neobundle#tap('vim-unimpaired')
      function! neobundle#hooks.on_post_source(bundle)
        " Line bubbling (sugar for ]e/[e).
        nmap <m-k> <plug>unimpairedMoveUp
        nmap <m-j> <plug>unimpairedMoveDown
        vmap <m-k> <plug>unimpairedMoveSelectionUpgv
        vmap <m-j> <plug>unimpairedMoveSelectionDowngv
        " Blank line insertion.
        nmap <m-s-k> <plug>unimpairedBlankUp
        nmap <m-s-j> <plug>unimpairedBlankDown
      endfunction

      call neobundle#untap()
    endif

    " Yank from cursor to end of line.
    nnoremap Y y$
    " Reselect pasted text in visual mode.
    nnoremap pv V`]
    vnoremap p p`]

    " Toggle paste mode.
    nnoremap <silent> <leader>p :setlocal paste! paste?<cr>
    set pastetoggle=<leader>p
  " }}}

  " Indent {{{
    " Retain selection when indenting in Visual mode (sugar for gv).
    vnoremap < <gv
    vnoremap > >gv

    " Toggle automatic indenting.
    nnoremap <silent> <leader>i :setlocal autoindent! autoindent?<cr>
  " }}}

  " Formatting {{{
    " Format a line.
    nnoremap Q gq
    " Split a line (complements J).
    nnoremap K i<cr><esc>
  " }}}

  " Lint {{{
    if neobundle#tap('syntastic')
      " Enable error indicators (via signs).
      let g:syntastic_enable_signs = 1
      " Auto-show the Syntastic LOC.
      let g:syntastic_auto_loc_list = 1

      " Don't check on write-quit.
      let g:syntastic_check_on_wq = 0

      call neobundle#untap()
    endif
  " }}}

  " Completion {{{
    if neobundle#tap('neocomplete.vim')
      " Enable automatically and at startup.
      let g:neocomplete#enable_at_startup = 1
      let g:neocomplete#enable_smart_case = 1
      " Require 3 characters to complete.
      let g:neocomplete#sources#syntax#min_keyword_length = 3
      " Buffers to not complete in.
      let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

      " Set up dicts.
      let g:neocomplete#keyword_patterns = {
            \ 'default': '\h\w*'
            \ }

      " Don't conflict with endwise.
      let g:endwise_no_mappings = 1

      function! s:tab()
        if neosnippet#jumpable()
          return "\<plug>(neosnippet_jump)"
        elseif pumvisible()
          return "\<c-n>"
        elseif neocomplete#complete_common_string() != ''
          return neocomplete#complete_common_string()
        else
          return "\<tab>"
        endif
      endfunction
      function! s:cr()
        if pumvisible()
          if neosnippet#expandable()
            return "\<plug>(neosnippet_expand)"
          else
            return neocomplete#close_popup()
          endif
        else
          return "\<cr>\<plug>DiscretionaryEnd"
        endif
      endfunction

      imap <expr> <cr> <sid>cr()
      imap <expr> <tab> <sid>tab()
      inoremap <expr> <esc> pumvisible() ? neocomplete#cancel_popup() : '<esc>'
      inoremap <expr> <c-c> pumvisible() ? neocomplete#cancel_popup() : '<c-c>'
      inoremap <expr> <c-f> neocomplete#complete_common_string()

      call neobundle#untap()
    endif
    if neobundle#tap('neosnippet.vim')
      let g:neosnippet#snippets_directory = s:bundle_cache."/vim-snippets/snippets"

      call neobundle#untap()
    endif
  " }}}

  " Spelling {{{
    " Enable spell checking.
    set spell spelllang=en

    " Toggle spell checking.
    nnoremap <silent> <leader>z :setlocal spell! spell?<cr>
  " }}}

  " Case {{{
    " Ignore case when searching, unless a uppercase letter is present.
    set ignorecase smartcase
    " When completing infer case.
    set infercase
  " }}}

  " Wrapping {{{
    " Hard wrap at 80 characters by default.
    set textwidth=79
    " Enable virtual wrapping, but only between words and only when out of room.
    set wrap linebreak wrapmargin=0
    " Wrap over lines.
    set whichwrap=h,l,<,>,[,],b,s
    set backspace=indent,eol,start

    " Move over virtual lines (wrapped lines).
    nnoremap j gj
    nnoremap k gk

    " Toggle forced line wrapping.
    nnoremap <silent> <leader>q :setlocal wrap! wrap?<cr>
  " }}}

  " Splits {{{
    " Open to the right.
    set splitright
    " Allow squishing splits.
    set winminheight=0
  " }}}
" }}}

" Movement {{{
  " Arrow Keys {{{
    nnoremap <left> <nop>
    nnoremap <down> <nop>
    nnoremap <up> <nop>
    nnoremap <right> <nop>
  " }}}

  " Seeking {{{
    if neobundle#tap('vim-seek')
      " Enable jumps.
      let g:seek_enable_jumps = 1

      " Remap this because Yankstack clobbers it.
      function! neobundle#hooks.on_post_source(bundle)
        nmap <silent> s <Plug>(seek-seek)
      endfunction

      call neobundle#untap()
    endif
  " }}}

  " Scrolling {{{
    if neobundle#tap('vim-smooth-scroll')
      noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<cr>
      noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<cr>
      noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<cr>
      noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<cr>

      call neobundle#untap()
    endif
  " }}}
" }}}

" Navigation {{{
  " Unite {{{
    if neobundle#tap('unite.vim')
      function! s:unite_settings()
        nnoremap <buffer> <esc> <plug>(unite_exit)
      endfunction
      if has('autocmd')
        autocmd vimrc FileType unite call s:unite_settings()
      endif

      let g:unite_source_history_yank_enable = 1
        if executable('ag')
          let g:unite_source_grep_command = 'ag'
          let g:unite_source_grep_default_opts = '--column --smart-case --nogroup --noheading --nocolor --follow'
          let g:unite_source_grep_recursive_opt = ''
        elseif executable('ack')
          let g:unite_source_grep_command = 'ack'
          let g:unite_source_grep_default_opts = '--column --smart-case --nogroup --noheading --nocolor --follow'
          let g:unite_source_grep_recursive_opt = ''
        elseif executable('ack-grep')
          let g:unite_source_grep_command = 'ack-grep'
          let g:unite_source_grep_default_opts = '--column --smart-case --nogroup --noheading --nocolor --follow'
          let g:unite_source_grep_recursive_opt = ''
        endif

        nnoremap <silent> <leader>f :Unite -buffer-name=files -start-insert file_rec/async file_mru<cr> " Fuzzy finder.
        nnoremap <silent> <leader>/ :Unite -buffer-name=grep -auto-preview grep:.<cr> " Quick grep.
        nnoremap <silent> <leader>d :Unite -bufer-name=cd --default-action=cd directory_rec/assync directory_mru<cr> " Quick cd.
        nnoremap <silent> <leader>b :Unite -buffer-name=buffers -auto-preview -quick-match buffer<cr> " Buffer searching.
        nnoremap <silent> <leader>y :Unite -buffer-name=yanks history/yank<cr> " Yank searching.

      call neobundle#untap()
    endif
  " }}}

  " Shell {{{
      if neobundle#tap('vimshell')
        nnoremap <silent> <leader>s :VimShell<cr>

        call neobundle#untap()
      endif
  " }}}

  " Grep {{{
    if executable('ag')
      set grepprg=ag\ --column\ --smart-case\ --nogroup\ --noheading\ --nocolor\ --follow
      set grepformat=%f:%l:%c:%m
    elseif executable('ack')
      set grepprg=ag\ --column\ --smart-case\ --nogroup\ --noheading\ --nocolor\ --follow\ $*
      set grepformat=%f:%l:%c:%m
    elseif executable('ack-grep')
      set grepprg=ag-grep\ --column\ --smart-case\ --nogroup\ --noheading\ --nocolor\ --follow\ $*
      set grepformat=%f:%l:%c:%m
    endif
  " }}}

  " Files {{{
    if neobundle#tap('vimfiler')
      let g:vimfiler_as_default_explorer = 1

      call neobundle#untap()
    endif
  " }}}

  " Buffers {{{
    " Map meta-h/l to switch buffers.
    nnoremap <silent> <m-h> :bp<cr>
    nnoremap <silent> <m-l> :bn<cr>
    " ...and meta-c/meta-shift-c to quit and delete.
    nnoremap <silent> <m-c> :Bdelete<cr>
    nnoremap <silent> <m-s-c> :q<cr>
  " }}}
" }}}

" Appearance {{{
  " Font {{{
    if s:is_macvim
      set guifont=Source_Code_Pro_Light:h10
      set antialias
    else
      set guifont=Source\ Code\ Pro\ Light\ 7.5
    endif
  " }}}

  " Colorscheme {{{
    " A amazing colorscheme.
    if neobundle#tap('vim-colors-solarized') " {{{
      colorscheme solarized

      call neobundle#untap()
    endif " }}}

    " Color Switching {{{
      " Quick bind to toggle the background.
      nnoremap <silent> <leader>c let &background = ( &background == "dark"? "light" : "dark" )<cr>

      " Change colors based on the time of day.
      function! RecolorBackground()
        if strftime("%H") >= 7 && strftime("%H") <= 17
          set background=light
          silent! AirlineRefresh
          return 'light'
        else
          set background=dark
          silent! AirlineRefresh
          return 'dark'
        endif
      endfunction

      autocmd vimrc BufWritePost * call RecolorBackground()
      call RecolorBackground()
    " }}}
  " }}}

  " Syntax {{{
    " Turn on syntax highlighting.
    syntax on

    " Toggle syntax highlighting.
    nnoremap <silent> <leader>h :if exists("g:syntax_on") <bar> syntax off <bar> else <bar> syntax on <bar> endif<cr>
  " }}}

  " Hidden {{{
    " Show hidden characters.
    set list
    set listchars=tab:»·,trail:·,eol:¬,nbsp:_
    " Totally conceal if no replacement exists, but in normal/command mode.
    set conceallevel=2 concealcursor=nc
    " Toggle hidden characters.
    nnoremap <silent> <leader>l :setlocal list! list?<cr>

    if neobundle#tap('indentLine')
      let g:indentLine_char = '┊'

      call neobundle#untap()
    endif
  " }}}

  " Search {{{
    " Show matched characters.
    set showmatch
  " }}}

  " Folding {{{
    " Turn on folding based on syntax plugins.
    set foldenable foldmethod=syntax
    " ...and unfold when needed.
    set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo

    " Open and close folds.
    nnoremap <space> za
  " }}}

  " Ruler {{{
    " Turn on line numbers.
    set number relativenumber
    " Color the column we wrap on.
    set colorcolumn=+1

    " Toggle line numbers.
    nnoremap <silent> <leader>n :setlocal number! relativenumber!<cr>
  " }}}

  " Status Bar " {{{
    " Disable the built in mode indicator, and don't show the last command.
    set noshowmode noshowcmd

    if neobundle#tap('vim-airline') " {{{
      " Use the pretty fonts.
      let g:airline_powerline_fonts = 1
      " Enable some nice extensions.
      let g:airline#extensions#tabline#enabled = 1
      let g:airline#extensions#whitespace#enabled = 1

      call neobundle#untap()
    endif " }}}
  " }}}

  " Messages {{{
    " Turn off bells.
    set noerrorbells novisualbell
    " Use abbreviations and disable 'Press Enter to Continue' messages.
    set shortmess+=filmnrxoOtT
  " }}}

  " GUI {{{
    " Get rid of GUI cruft.
    set guioptions-=m
    set guioptions-=T
    set guioptions-=e
    set guioptions-=r
    set guioptions-=L
  " }}}

  " Startup {{{
    " A nice splash screen.
    if neobundle#tap('vim-startify') " {{{
      " Save sessions.
      let g:startify_session_dir = s:get_cache('session')
      let g:startify_session_persistence = 1
      let g:startify_session_autoload    = 1

      " Show relative paths.
      let g:startify_relative_path = 1
      " Trim entries.
      let g:startify_files_number        = 5
      let g:startify_enable_special      = 0
      let g:startify_skiplist = ['COMMIT_EDITMSG',
                              \ 'bundle/.*/doc',
                              \  $VIMRUNTIME.'/doc']

      " Tidy menu.
      let g:startify_list_order = [['   Recent:'],
                                 \ 'files',
                                 \ ['   Sessions:'],
                                 \ 'sessions',
                                 \ ['   Bookmarks:'],
                                 \ 'bookmarks']
      let g:startify_bookmarks = ['~/prj',
                                \ '~/tmp',
                                \ '~/.dotfiles',
                                \ '~/.freshrc']

      " Start numbering at 1.
      let g:startify_custom_indices = map(range(1,100), 'string(v:val)')

      " Pretty.
      let g:startify_custom_header = [ '',
                                    \ '   __      ___           ',
                                    \ '   \ \    / (_)          ',
                                    \ '    \ \  / / _ _ __ ___  ',
                                    \ '     \ \/ / | | ''_ ` _ \',
                                    \ '      \  /  | | | | | | |',
                                    \ '       \/   |_|_| |_| |_|',
                                    \ '']

      " Disable color column in startify.
      autocmd vimrc FileType startify setlocal colorcolumn=

      call neobundle#untap()
    endif " }}}
  " }}}
" }}}

" Caches {{{
  " Use swapfiles, backups, and persist undo data.
  set swapfile backup undofile

  " Save the marks for the last 50 files, and 1000 register lines.
  set viminfo='50,<1000,h
  " Save 100 lines of command-line and search history.
  set history=100
  " Save view/session to view/session files.
  set viewoptions=cursor,folds
  set sessionoptions=curdir,folds,blank,buffers,tabpages,resize,winsize,winpos

  let &directory = s:get_cache('swap')
  let &backupdir = s:get_cache('backup')
  if has("persistent_undo")
    let &undodir = s:get_cache('undo')
  endif
  if has("mksession")
    let &viewdir = s:get_cache('view')
  endif

  " Load the last cursor position.
  autocmd vimrc BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe 'normal! g`"' | endif
  " Clear Neobundle's cache when we write out vimrc.
  autocmd vimrc BufWritePost *vimrc* NeoBundleClearCache
" }}}

" vim:foldmethod=marker
