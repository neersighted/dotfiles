" Profile startup time.
if has('vim_starting')
  let startup = reltime()
  autocmd VimEnter * let ready = reltime(startup) | redraw | echo reltimestr(ready)
endif

" Variables

if !empty($XDG_DATA_HOME)
  let g:vim = $XDG_DATA_HOME . '/vim'
else
  let g:vim = '~/.vim'
endif

let s:is_linux   = match(system('uname'), 'Linux') != -1
let s:is_mac     = match(system('uname'), 'Darwin') != -1
let s:is_windows = has('win32') || has('win64')
let s:is_cygwin  = has('win32unix')

let s:is_gui     = has('gui_running')
let s:is_gtk     = has('gui_gtk2')
let s:is_macvim  = has('gui_macvim')
let s:is_neovim  = has('nvim')

" Functions

function! s:is_empty(dir) " Checks if a directory is empty.
  return empty(glob(expand(a:dir)))
endfunction

function! s:mkdir_p(dir) " Ensures a directory exists.
  let dir = expand(a:dir)
  if s:is_empty(dir) && !isdirectory(dir)
    try
      call mkdir(target, 'p')
    catch
      " On some platforms mkdir() does not exist.
      silent execute '!mkdir -p ' . dir
    endtry
  endif
endfunction

function! s:cache_for(for) " Provides a named folder in the Vim cache.
  let dir = resolve(expand(g:vim . '/' . a:for))
  call s:mkdir_p(dir)
  return dir
endfunction

function! s:try(cmd, default) " Try a command, and if it fails try another.
  if exists(':' . a:cmd) && !v:count
    let tick = b:changedtick
    execute a:cmd
    if tick == b:changedtick
      execute join(['normal!', a:default])
    endif
  else
    execute join(['normal! ', v:count, a:default], '')
  endif
endfunction

function! s:preserve(cmd) " Execute a command without altering position/history.
  let old_search = @/
  let cursor_l = line('.')
  let cursor_c = col('.')
  execute a:cmd
  let @/ = old_search
  call cursor(cursor_l, cursor_c)
endfunction

" Plugins

if s:is_empty(g:vim . '/autoload/plug.vim')
  silent execute '!curl -fLo ' . g:vim . '/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

silent execute 'set runtimepath+=' . g:vim
call plug#begin(s:cache_for('plugged'))

" Dependencies...
Plug 'tpope/vim-dispatch' " Async adapters for running Vim's compiler plugins, or arbitrary commands.
Plug 'tpope/vim-repeat' " Repeat support for arbitrary plugins.

" Fixes and Tweaks
Plug 'tpope/vim-sensible' " Sane defaults for Vim.
Plug 'drmikehenry/vim-fixkey' " Hacks to fix escape sequences (in tmux, etc).
Plug 'talek/obvious-resize' " Intiutive split resizing.
Plug 'tpope/vim-vinegar' " Enhancements for netrw.
Plug 'tpope/vim-characterize' " Modernize 'ga', the character info command.
Plug 'kopischke/vim-stay' " Restore/preserve views.

" Integration
Plug 'kopischke/vim-fetch' " Open files to line:column.
Plug 'tpope/vim-eunuch' " Helpers for unix commands.
Plug 'johnsyweb/vim-makeshift' " Auto detect the build command.
Plug 'ludovicchabant/vim-gutentags' " Automatic tag generation.

" Interface
Plug 'mhinz/vim-startify' " A simple startup screen.
Plug 'vim-airline/vim-airline' " A lightweight, well-integrated status bar.
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-ctrlspace/vim-ctrlspace' " A fuzzy-search driven interface for Vim.
Plug 'mhinz/vim-grepper' " A wrapper around all things grep.
Plug 'mbbill/undotree' " A visualization of Vim's undo branches.
Plug 'mhinz/vim-signify' " VCS diffs directly in the gutter.

" Editing
Plug 'tpope/vim-unimpaired' " Pairs of complementary mappings.
Plug 'tpope/vim-commentary' " Bindings to comment/uncomment code.
Plug 'tpope/vim-speeddating' " Easily increment and decrement dates.
Plug 'tommcdo/vim-exchange' " Exchange text based on motions.
Plug 'AndrewRadev/splitjoin.vim' " Split and join statements intelligently.

" Selection
Plug 'terryma/vim-multiple-cursors' " Multiple cursors and selection.
Plug 'terryma/vim-expand-region' " Syntactically expand the selection.

" Formatting
Plug 'tpope/vim-sleuth' " Auto-detect indent settings.
Plug 'junegunn/vim-easy-align' " Align text objects using verbs.
Plug 'jiangmiao/auto-pairs' " Automatically close delimiters (incl quotes, parenthesis, etc).
Plug 'tpope/vim-endwise' " Automatically end block constructs in supported languages.

" Navigation
Plug 'pgdouyon/vim-evanesco' " A better, auto-clearing /...
Plug 'kshenoy/vim-signature' " Simple tool to manage and visualize marks.
Plug 'tommcdo/vim-kangaroo' " Simple, manual jump-stack.

" Motions/Text Objects
Plug 'justinmk/vim-sneak' " The missing motion, a mid-range two-character seek (and EasyMotion replacement).
Plug 'tpope/vim-surround' " Motions to manipulate the surroundings of a text object.
Plug 'tommcdo/vim-ninja-feet' " Motions to the ends of a text object.
Plug 'wellle/targets.vim' " A collection of many useful text objects (such as remote, next, etc).

" Support
Plug 'sheerun/vim-polyglot' " Batterie-included language support pack.
Plug 'tpope/vim-fugitive' " Tools and syntax highlighting for Git.
Plug 'jamessan/vim-gnupg' " Support for GnuPG/PGP-encrypted files.

" Highlighting
Plug 'altercation/vim-colors-solarized' " My preffered colorscheme.
Plug 'luochen1990/rainbow', { 'on': 'RainbowToggle' } " Parenthesis visualization.
Plug 'Yggdroot/indentLine' " Show markers for indents.

call plug#end()

" Configuration

" Core
set hidden " Allow backgrounding buffers.

" Input
set ttimeoutlen=50 timeoutlen=300 " Make escape/keybinds faster.
set mouse=a " Enable mouse support.
if s:is_macvim | set macmeta | endif " Fix the Mac option key.

"
" Settings
"

" Setup {{{
  " Set up and clear my autocommand group.
  augroup vimrc
    autocmd!
  augroup end
" }}}

" Input {{{
  " Timeout {{{
  " }}}

  " Keyboard {{{
  " }}}
" }}}

" Output {{{

  " Assume a fast TTY.
  set ttyfast
  " Postpone redraws.
  set lazyredraw
" }}}

" Editing {{{
  " Grep {{{

    " Use a faster grep for CtrlSpace.
    if executable("rg")
      let g:CtrlSpaceGlobCommand = 'rg -g ""'
    elseif executable("ag")
      let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
    endif
  " }}}
  " Search/Replace {{{
    " Enable escape characters.
    set magic
    " Show searches as they are typed.
    set hlsearch incsearch

    " Quick substitute.
    nnoremap <leader>s :%s/<c-r><c-w>//gc<left><left><left>
  " }}}

  " Selection {{{
    " Use the system clipboard.
    set clipboard=unnamedplus

    " Allow the cursor to go beyond the line and to make true blocks.
    set virtualedit=block,onemore

    " Yank from cursor to end of line.
    nnoremap Y y$
    " Reselect pasted text in visual mode.
    nnoremap pv V`]
    vnoremap p p`]

    " Region expansion.
    vmap K <Plug>(expand_region_expand)
    vmap J <Plug>(expand_region_shrink)
  " }}}

  " Alignment {{{
    " Interactive alignment of text.
    nmap gl <Plug>(EasyAlign)
    vmap <Enter> <Plug>(EasyAlign)
  " }}]

  " Indent {{{
    " Retain selection when indenting in Visual mode (sugar for gv).
    vnoremap < <gv
    vnoremap > >gv
  " }}}

  " Spelling {{{
    " Disable spell checking by default.
    set nospell spelllang=en
    " ...but start it on some filetypes.
    autocmd vimrc FileType gitcommit setlocal spell
    autocmd vimrc FileType markdown setlocal spell
    autocmd vimrc FileType text setlocal spell
  " }}}

  " Case {{{
    " Ignore case when searching, unless a uppercase letter is present.
    set ignorecase smartcase
    " When completing infer case.
    set infercase
  " }}}

  " Wrapping {{{
    " Hard wrap at 80 characters by default.
    "set textwidth=79
    " Wrap over lines.
    set whichwrap=h,l,<,>,[,],b,s
    set backspace=indent,eol,start

    " Move over virtual lines (wrapped lines).
    nnoremap j gj
    nnoremap k gk
  " }}}

  " Splits {{{
    " Open to the right.
    set splitright
    " Allow squishing splits.
    set winminheight=0

    " Resize intiuitively!
    noremap <silent> <c-up> :ObviousResizeUp<cr>
    noremap <silent> <c-down> :ObviousResizeDown<cr>
    noremap <silent> <c-left> :ObviousResizeLeft<cr>
    noremap <silent> <c-right> :ObviousResizeRight<cr>
  " }}}
" }}}

" Movement {{{
  " Arrow Keys {{{
    nnoremap <left> <nop>
    nnoremap <down> <nop>
    nnoremap <up> <nop>
    nnoremap <right> <nop>
  " }}}

  " Sneaking {{{
    " Enable streak (EasyMotion) mode.
    let g:sneak#streak = 1
    " Be clever: if I press s in a match, seek to the next match.
    let g:sneak#s_next = 1

    " Replace f with sneak.
    nmap f <Plug>Sneak_f
    nmap F <Plug>Sneak_F
    xmap f <Plug>Sneak_f
    xmap F <Plug>Sneak_F
    omap f <Plug>Sneak_f
    omap F <Plug>Sneak_F
    " Replace t with sneak.
    nmap t <Plug>Sneak_t
    nmap T <Plug>Sneak_T
    xmap t <Plug>Sneak_t
    xmap T <Plug>Sneak_T
    omap t <Plug>Sneak_t
    omap T <Plug>Sneak_T
  " }}}
  " Scrolling {{{

  " Jumping {{{
    nmap <tab> %
  " }}}
" }}}

" Appearance {{{
  " Font {{{
    if s:is_macvim
      set guifont=Source_Code_Pro:h11
      set antialias
    else
      set guifont=Source\ Code\ Pro\ 10
    endif
  " }}}

  " Colorscheme {{{
    " A amazing colorscheme.
    colorscheme solarized
  " }}}

  " Syntax {{{
    " Turn on syntax highlighting.
    syntax on

    " Less annoying MatchParen.
    highlight MatchParen cterm=bold ctermbg=NONE ctermfg=NONE
    highlight MatchParen gui=bold guibg=NONE guifg=NONE
  " }}}

  " Hidden {{{
    " Show hidden characters.
    set list
    set listchars=tab:»·,trail:·,eol:¬,nbsp:_
    " Totally conceal if no replacement exists, but in normal/command mode.
    set conceallevel=2 concealcursor=nc

    let g:indentLine_char = '┊'
  " }}}

  " Search {{{
    " Show matched characters.
    set showmatch
  " }}}

  " Wrapping {{{
    " Enable virtual wrapping, but only between words and only when out of room.
    set wrap linebreak wrapmargin=0
    set showbreak=⇇
    " Wrap to the current indent level.
    set breakindent
  " }}}

  " Ruler {{{
    " Turn on line numbers.
    set number relativenumber

    " Color the column we wrap on.
    set colorcolumn=+1
    " ...but not in help files.
    autocmd vimrc FileType help setlocal colorcolumn=
  " }}}

  " Status Bar {{{
    " Disable the built in mode indicator, and don't show the last command.
    set noshowmode noshowcmd

    " Use the pretty fonts.
    let g:airline_powerline_fonts = 1
    " Enable some nice extensions.
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#whitespace#enabled = 1
  " }}}

  " Messages {{{
    " Turn off bells.
    set noerrorbells novisualbell
    " Use abbreviations and disable 'Press Enter to Continue' messages.
    set shortmess+=filmnrxoOtT
  " }}}

  " Help {{{
    " Make vim help work.
    autocmd vimrc FileType vim setlocal keywordprg=:help
  " }}}

  " GUI {{{
    " Get rid of GUI cruft.
    set guioptions-=m
    set guioptions-=T
    set guioptions-=e
    set guioptions-=r
    set guioptions-=L
  " }}}

" Caches {{{
  " Use swapfiles, backups, and persist undo data.
  set swapfile backup undofile

  " Save the marks for the last 50 files, and 1000 register lines.
  set viminfo='50,<1000,h
  " Save 100 lines of command-line and search history.
  set history=100
  " Save view/session to view/session files.
  set viewoptions=cursor,folds,slash,unix
  set sessionoptions=curdir,folds,blank,buffers,tabpages,resize,winsize,winpos

  let &directory = s:cache_for('swap')
  let &backupdir = s:cache_for('backup')
  let &undodir   = s:cache_for('undo')
  let &viewdir   = s:cache_for('view')
" }}}
"

nnoremap <silent> J :call <sid>try('SplitjoinJoin',  'J')<cr>
nnoremap <silent> S :call <sid>try('SplitjoinSplit', "r\015")<cr>

command! -bang -nargs=* KillTrailingWhitespace call s:preserve('%s/\s\+$//e')
