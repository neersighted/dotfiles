" Profile startup time.
if has('vim_starting')
  let startup = reltime()
  autocmd VimEnter * let ready = reltime(startup) | redraw | echo reltimestr(ready)
endif

" Variables

if !empty($XDG_CONFIG_HOME)
  let g:vim = $XDG_CONFIG_HOME . '/vim'
else
  let g:vim = '~/.config/vim'
endif

let s:is_linux   = match(system('uname'), 'Linux') != -1
let s:is_mac     = match(system('uname'), 'Darwin') != -1
let s:is_windows = has('win32') || has('win64')
let s:is_cygwin  = has('win32unix')

let s:is_gui     = has('gui_running')
let s:is_gtk     = has('gui_gtk2')
let s:is_macvim  = has('gui_macvim')
let s:is_neovim  = has('nvim')

" Functions

function! s:is_empty(dir) " Checks if a directory is empty.
  return empty(glob(expand(a:dir)))
endfunction

function! s:mkdir_p(dir) " Ensures a directory exists.
  let dir = expand(a:dir)
  if s:is_empty(dir) && !isdirectory(dir)
    try
      call mkdir(target, 'p')
    catch
      " On some platforms mkdir() does not exist.
      silent execute '!mkdir -p ' . dir
    endtry
  endif
endfunction

function! s:cache_for(for) " Provides a named folder in the Vim cache.
  let dir = resolve(expand(g:vim . '/' . a:for))
  call s:mkdir_p(dir)
  return dir
endfunction

function! Cond(cond, ...) " Conditionally enable a plugin.
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

function! Preserve(cmd) " Execute a command without altering position/history.
  let old_search = @/
  let cursor_l = line('.')
  let cursor_c = col('.')
  execute a:cmd
  let @/ = old_search
  call cursor(cursor_l, cursor_c)
endfunction

" Plugins

autocmd VimEnter * if !empty(filter(copy(g:plugs), '!isdirectory(v:val.dir)')) | PlugInstall | source $MYVIMRC | q | endif

silent execute 'set runtimepath+=' . g:vim
call plug#begin(s:cache_for('plugged'))

" Dependencies...
Plug 'tpope/vim-repeat' " Repeat support for arbitrary plugins.

" Fixes and Tweaks
Plug 'tpope/vim-sensible' " Sane defaults for Vim.
Plug 'drmikehenry/vim-fixkey', Cond(!has('nvim')) " Hacks to fix escape sequences (in tmux, etc).
Plug 'talek/obvious-resize', { 'on': ['ObviousResizeUp', 'ObviousResizeDown', 'ObviousResizeLeft', 'ObviousResizeRight'] } " Intiutive split resizing.
Plug 'mhinz/vim-sayonara', { 'on': 'Sayonara' } " Intiuitive buffer closing.
Plug 'tpope/vim-vinegar' " Enhancements for netrw.
Plug 'tpope/vim-characterize' " Modernize 'ga', the character info command.
Plug 'kopischke/vim-stay' " Restore/preserve views.

" Integration
Plug 'christoomey/vim-tmux-navigator' " Unified movement in Vim and Tmux panes.
Plug 'tpope/vim-eunuch' " Helpers for unix commands.
Plug 'tpope/vim-dispatch', { 'on': ['Make', 'Dispatch'] } " Async adapters for running Vim's compiler plugins, or arbitrary commands.
Plug 'kopischke/vim-fetch' " Open files to line:column.
Plug 'johnsyweb/vim-makeshift' " Auto detect the build command.
Plug 'ludovicchabant/vim-gutentags' " Automatic tag generation.

" Interface
Plug 'mhinz/vim-startify' " A simple startup screen.
Plug 'vim-airline/vim-airline' " A lightweight, well-integrated status bar.
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-ctrlspace/vim-ctrlspace' " A fuzzy-search driven interface for Vim.
Plug 'mhinz/vim-grepper', { 'on': 'Grepper' } " A wrapper around all things grep.
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' } " A visualization of Vim's undo branches.
Plug 'mhinz/vim-signify' " VCS diffs directly in the gutter.

" Editing
Plug 'tpope/vim-unimpaired' " Pairs of complementary mappings.
Plug 'tpope/vim-commentary' " Bindings to comment/uncomment code.
Plug 'tpope/vim-speeddating' " Easily increment and decrement dates.
Plug 'tommcdo/vim-exchange' " Exchange text based on motions.
Plug 'AndrewRadev/splitjoin.vim' " Split and join statements intelligently.

" Selection
Plug 'terryma/vim-multiple-cursors' " Multiple cursors and selection.
Plug 'terryma/vim-expand-region' " Syntactically expand the selection.

" Formatting
Plug 'tpope/vim-sleuth' " Auto-detect indent settings.
Plug 'junegunn/vim-easy-align' " Align text objects using verbs.
Plug 'jiangmiao/auto-pairs' " Automatically close delimiters (incl quotes, parenthesis, etc).
Plug 'tpope/vim-endwise' " Automatically end block constructs in supported languages.

" Search/Navigation
Plug 'pgdouyon/vim-evanesco' " A better, auto-clearing /...
Plug 'kshenoy/vim-signature' " Simple tool to manage and visualize marks.
Plug 'tommcdo/vim-kangaroo' " Simple, manual jump-stack.

" Motions/Text Objects
Plug 'justinmk/vim-sneak' " The missing motion, a mid-range two-character seek (and EasyMotion replacement).
Plug 'tpope/vim-surround' " Motions to manipulate the surroundings of a text object.
Plug 'tommcdo/vim-ninja-feet' " Motions to the ends of a text object.
Plug 'wellle/targets.vim' " A collection of many useful text objects (such as remote, next, etc).

" Support
Plug 'sheerun/vim-polyglot' " Batterie-included language support pack.
Plug 'tpope/vim-fugitive' " Tools and syntax highlighting for Git.
Plug 'jamessan/vim-gnupg' " Support for GnuPG/PGP-encrypted files.

" Highlighting
Plug 'flazz/vim-colorschemes' " A collection of colorschemes.
Plug 'luochen1990/rainbow', { 'on': 'RainbowToggle' } " Parenthesis visualization.
Plug 'Yggdroot/indentLine' " Show markers for indents.

call plug#end()

" Configuration

" Core
set hidden " Allow backgrounding buffers.
augroup vimrc | autocmd!

" State
set swapfile backup undofile " Use swapfiles, backups, and persist undo data.
set viminfo='50,<1000,h history=1000 " Save a decent amount of history.
set viewoptions=cursor,folds,slash,unix " Save view/session data.
let &directory = s:cache_for('swap')
let &backupdir = s:cache_for('backup')
let &undodir   = s:cache_for('undo')
let &viewdir   = s:cache_for('view')

" Interface
silent colorscheme solarized " Use my colorscheme of choice.
if strftime("%H") >= 5 && strftime("%H") <= 17 | set background=light | else | set background=dark | endif " Set colors based on the time of day.
if s:is_macvim | set guifont=Source_Code_Pro:h11 antialias | else | set guifont=Source\ Code\ Pro\ 10 | endif " Use my font of choice as well.
set guioptions=ai shortmess+=filmnrxoOtT " Minimal GUI: selection and icon only, abbreviate as much as possible.
set ttyfast lazyredraw " Assume a fast TTY, optimize render performance.
set noerrorbells novisualbell " Turn off bells.
set ttimeoutlen=50 timeoutlen=300 " Make escape/keybinds faster.
set mouse=a " Enable mouse support.
if s:is_macvim | set macmeta | endif " Fix the Mac option key.
set number relativenumber " Use relative line numbering.
set colorcolumn=80 " Indicate column 80.
set wrap linebreak wrapmargin=0 " Enable virtual wrapping.
set showbreak=⇇ breakindent " Indicate wrapping with an icon and indent.
set winminheight=0 splitright " Allow squishing splits, open splits to the right.
noremap <silent> <c-w>+ :<c-u>ObviousResizeUp<cr>
noremap <silent> <c-w>- :<c-u>ObviousResizeDown<cr>
noremap <silent> <c-w>< :<c-u>ObviousResizeLeft<cr>
noremap <silent> <c-w>> :<c-u>ObviousResizeRight<cr>
set noshowmode noshowcmd showtabline=0 " Disable the built in status indicators/tab line.
let g:airline_powerline_fonts = 1 " Use pretty fonts for airline.
let g:airline#extensions#whitespace#enabled = 1 " Show trailing whitespace.
set list listchars=tab:»·,trail:·,eol:¬,nbsp:_ " Show hidden characters.
set conceallevel=2 concealcursor=nc " Enable conceal support.
let g:indentLine_char = '┊' " Use a small line to show space-based indentation.
let g:rainbow_active = 0 " Manually enable rainbow parenthesis.
set showmatch " Indicate when a matched delimiter pair is created.
highlight MatchParen cterm=bold ctermbg=NONE ctermfg=NONE gui=bold guibg=NONE guifg=NONE " Less annoying MatchParen.

" Selection
set clipboard=unnamedplus " Use the system clipboard.
nnoremap Y y$
nnoremap pv V`]
vnoremap p p`]

" Editing
set textwidth=0 " Disable automatic wrapping...
autocmd FileType text,gitcommit,markdown setlocal textwidth=78 " ...except some filetypes.
set virtualedit=block,onemore " Allow the cursor to select the end of the line/form blocks.
set whichwrap=h,l,<,>,[,],b,s " Wrap the cursor over line.
set backspace=indent,eol,start " Backspace over lines.
nnoremap j gj
nnoremap k gk
vnoremap < <gv
vnoremap > >gv
set nospell spelllang=en " Disable spell checking by default.
autocmd FileType text,gitcommit,markdown setlocal spell " ...but start it on some filetypes.

" Formatting
nmap gl <Plug>(EasyAlign)
xmap gl <Plug>(EasyAlign)

" Search/Navigation
set magic " Enable escape characters.
set hlsearch incsearch " Show searches as they are typed.
set ignorecase smartcase " Ignore case when searching, unless a uppercase letter is present.
let g:CtrlSpaceGlobCommand = 'rg -g ""' " Use a faster grep for CtrlSpace.
nmap <tab> %

" Motions
let g:sneak#streak = 1 " Enable streak (EasyMotion) mode.
let g:sneak#s_next = 1 " Press again to skip to the next match.
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

" Documentation
autocmd FileType vim setlocal keywordprg=:help

" Commands
command! -bang -nargs=* KillTrailingWhitespace call Preserve('%s/\s\+$//e')

augroup end
