# Config

# Use $SHELL as the shell (we do this so it's not a login shell).
set -g default-command "$SHELL"
# We're our own terminal now!
set -g default-terminal 'tmux-256color'
# Force true color in xterm(-alikes).
set -g -a terminal-overrides ',xterm-256color:Tc'
# Force cursor-changing support in all terminals.
set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# Count from 1.
set -g base-index 1
# Renumber windows automatically as well.
set -g renumber-windows on
# Rename windows automatically.
set -g automatic-rename on
# Name the window.
set -g set-titles on
set -g set-titles-string '[#S/#I/#P] #W | #T'
# Use 12-hour time.
set -g clock-mode-style 12

# Resize the window when no smaller client is looking.
set -g aggressive-resize on
# Retain a lot more history.
set -g history-limit 50000

# Use VI-style keys.
set -g mode-keys vi
# ...except in the command line, where we use readline keys.
set -g status-keys emacs
# Ename xterm-style extended key sequences.
set -g xterm-keys on
# Enable mouse support.
set -g mouse on
# Enable focus events if supported.
set -g focus-events on
# Monitor background tabs.
set -g monitor-activity "on"

# Get rid of the god-awful delay.
set -g escape-time 0
# Update status faster.
set -g status-interval 1
# Show messages longer.
set -g display-time 4000

# Colors
set -g display-panes-active-colour blue
set -g display-panes-colour brightred
set -g clock-mode-colour cyan

# Binds

# Start Clean
unbind -a

# Prefix
set -g prefix C-z
bind C-z last-window
bind z send-prefix

# Configuration
bind : command-prompt
bind ? list-keys
bind C-r source ~/.tmux.conf

# Clear Screen
bind C-l send C-l

# Window Management
bind n new-window
bind m command-prompt -I '#I' "move-window -t '%%'"
bind r command-prompt -I '#W' "rename-window '%%'"
bind j command-prompt "select-window -t ':%%'"
bind c choose-window
bind x kill-pane
bind , select-window -t :-
bind . select-window -t :+

# Window Manipulation
bind s split-window -v -c '#{pane_current_path}'
bind v split-window -h -c '#{pane_current_path}'
bind b break-pane
bind a split-window -h \; choose-window 'kill-pane ; join-pane -h -t %%'
bind A split-window -h \; choose-window 'kill-pane ; join-pane -h -s %%'
bind [ swap-pane -U
bind ] swap-pane -D
bind f resize-pane -Z
bind o next-layout
bind O rotate-window

# Session Management
bind N new-session
bind C choose-session
bind R command-prompt -I '#S' "rename-session '%%'"
bind X kill-session
bind Z suspend-client
bind < switch-client -p
bind > switch-client -n

# Navigation
bind t choose-tree -u
bind T display-panes

# Client Management
bind d detach-client
bind D choose-client

# Vim Detection
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Pane Movement
bind -n C-h if "$is_vim" "send C-h"  "select-pane -L"
bind -n C-j if "$is_vim" "send C-j"  "select-pane -D"
bind -n C-k if "$is_vim" "send C-k"  "select-pane -U"
bind -n C-l if "$is_vim" "send C-l"  "select-pane -R"
bind -n C-\ if "$is_vim" "send C-\\" "select-pane -l"

# Explicit Pane Movement
bind 1 select-window -t :1
bind 2 select-window -t :2
bind 3 select-window -t :3
bind 4 select-window -t :4
bind 5 select-window -t :5
bind 6 select-window -t :6
bind 7 select-window -t :7
bind 8 select-window -t :8
bind 9 select-window -t :9
bind 0 select-window -t :10
bind F1 select-window -t :11
bind F2 select-window -t :12
bind F3 select-window -t :13
bind F4 select-window -t :14
bind F5 select-window -t :15
bind F6 select-window -t :16
bind F7 select-window -t :17
bind F8 select-window -t :18
bind F9 select-window -t :19
bind F10 select-window -t :20

# Resizing
bind -n C-Up    if "$send_raw" "send C-Up"    "resize-pane -U"
bind -n C-Down  if "$send_raw" "send C-Down"  "resize-pane -D"
bind -n C-Left  if "$send_raw" "send C-Left"  "resize-pane -L"
bind -n C-Right if "$send_raw" "send C-Right" "resize-pane -R"

# Copy/Paste
bind / copy-mode
bind escape copy-mode
# Copy Support
bind -T copy-mode-vi escape send -X cancel
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi V send -X select-line
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'xsel -b -i'
bind -T copy-mode-vi Y send -X copy-selection
bind p run 'xsel -b -o | tmux load-buffer -; tmux paste-buffer'
bind P choose-buffer
bind k delete-buffer
bind K choose-buffer "delete-buffer -b '%%'"
bind B list-buffers

# URL Selection
bind w run "tmux split-window -p 33 tmuxrl #P"
bind W run "tmux split-window -p 33 tmuxrl #P full"

# Mouse Selection/Resizing
bind -n MouseDown1Pane select-pane -t=\; send -M
bind -n MouseDrag1Border resize-pane -M
bind -n MouseDown1Status select-window -t=
bind -n WheelUpStatus previous-window
bind -n WheelDownStatus next-window

# Mouse Scroll
bind -n WheelUpPane if -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
  'send -Mt=' \
  'if -Ft= "#{alternate_on}" \
    "send -t= Up" \
    "copy-mode -et="'
bind -n WheelDownPane if -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
  'send -Mt=' \
  'if -Ft= "#{alternate_on}" \
    "send -t= Down" \
    "send -Mt="'

# Status Line
set -g status "on"
set -g status-position "bottom"
set -g status-justify "left"

set -g status-style "fg=colour14,bg=colour0"
set -g window-status-separator " "

set -g status-right-length "100"
set -g status-right-style "fg=colour15,bg=colour10"
set -g status-right " %r "

set -g status-left-length "100"
set -g status-left-style "fg=colour15,bg=colour10,bold"
set -g status-left " #S #[bg=colour0] "

set -g window-status-style "fg=colour14,bg=colour0"
set -g window-status-format " (#I) #W "

set -g window-status-current-style "fg=colour15,bg=colour11"
set -g window-status-current-format " [#I] #W "

set -g window-status-activity-style "bold"
set -g window-status-bell-style "fg=colour0,bg=colour14"

# vi:ft=tmux:
