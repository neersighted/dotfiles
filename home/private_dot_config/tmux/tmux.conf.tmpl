#
# Terminal
#

# Escapes
set -s default-terminal 'tmux-256color'
set -sa terminal-features 'xterm*:RGB:extkeys' # add features supported by most xterm-compatible terminals
set -s extended-keys on # support xterm-style extended keys (CSI u)
set -s escape-time 25 # pass escape sequences (almost) instantly

# Environment
set -g default-command "exec ${SHELL}" # launch a non-login shell by default
set -ga update-environment 'WSL_INTEROP' # update WSL interop socket on reattach

# Processes
set -g remain-on-exit failed # keep panes that exit abonormally open

# Alerting
set -s focus-events on # pass focus events through
set -g monitor-activity on # monitor for background activity
set -g activity-action none # don't alert on activity
set -g monitor-bell on # process bells
set -g bell-action current # only process bells for the current window

# Input
set -g mouse on # enable mouse support
set -g mode-keys vi # vi-style copy
set -g status-keys emacs # readline-style command line

# Clipboard
set -s set-clipboard on # bubble OSC 52 up
set -s copy-command 'env COPY_PROVIDERS=desktop clipboard-provider copy' # use clipboard-provider for copy-pipe and friends

# Windows
set -g base-index 1 # number windows from 1
set -g set-titles on # pass titles to parent terminal
if 'test -n "$SSH_CONNECTION"' { # minimal title string
  set -g set-titles-string '#{host_short}: #{session_name}'
} {
  set -g set-titles-string 'tmux: #{session_name}'
}

# History
set -g history-limit 100000 # store 100k lines of history

#
# Hooks
#

set-hook -g client-attached { run-shell 'pkill -USR1 -P #{pid} fish' } # signal fish to refresh env
set-hook -g client-session-changed { if -F "#{==:#{session_created},#{session_last_attached}}" {} { run-shell 'pkill -USR1 -P #{pid} fish' }} # ...except during new sessions

#
# Keybinds
#

# Pane Process Detection
set -g @should_nav 'ps -o state= -o comm= -t #{pane_tty} | grep -Eiq "^[^TXZ ]s?\+?\s+(nvim|fzf)$"'

# Reset
unbind -a
unbind -a -T copy-mode-vi

# Keys
set -g prefix C-q
bind -N 'Send the prefix key' q { send-prefix }
bind -N 'Send the prefix key' -n C-s { send-prefix }
bind -N 'Activate customize mode' C { customize-mode -Z }
bind -N 'Display debug information' M-d display-message -a
bind -N 'List key bindings' M-/ { list-keys -N }
bind -N 'Describe key binding' M-? { command-prompt -k -p 'key' { list-keys -N1 '%%' } }
bind -N 'Display manpage' F1 { display-popup -E -h '90%' -w '75%' 'man tmux' }
bind -N 'Display a clock' C-t { clock-mode }

# Passthrough
bind -N 'tmx.fish' -n M-x { run -b 'fish -c tmx' }

# Meta
bind -N 'Show messages' '~' { show-messages }
bind -N 'Prompt for a command' ':' { command-prompt }
bind -N 'Reload configuration' ';' { source "$XDG_CONFIG_HOME/tmux/tmux.conf" }

# Session Management
bind -N 'Create a new session' N { new-session }
bind -N 'Detach the current client' d { detach-client }
bind -N 'Choose a client from a list' D { choose-client -Z }
bind -N 'Kill the current session' C-x { confirm -p 'kill-session #{session_name}? (y/n)' kill-session }
bind -N 'Suspend the current client' C-z { suspend-client }
bind -N 'Rename the current session' R { command-prompt -I '#{session_name}' { rename-session -- '%%' } }

# Window Management
bind -N 'Create a new window' n { new-window -c '#{pane_current_path}' }
bind -N 'Kill the current window' X { confirm -p 'kill-window #{window_index}? (y/n)' kill-window }
bind -N 'Move the current window' m { command-prompt -T { move-window -t '%%' } } # FIXME: 3.3 -T target
bind -N 'Swap the current window' M { command-prompt -W { swap-window -d -t '%%' } } # FIXME: 3.3 -T window-target
bind -N 'Swap the current window forward' -r ] { swap-window -d -t:+1 }
bind -N 'Swap the current window backward' -r [ { swap-window -d -t:-1 }
bind -N 'Rename the current window' r { command-prompt -I '#{window_name}' { rename-window -- '%%' } }
bind -N 'Renumber all windows' \\ { move-window -r }
bind -N 'Display pane numbers' '#' { display-panes }

# Pane Management
bind -N 'Split pane horizontally' s { split-window -c '#{pane_current_path}' -v }
bind -N 'Split window horizontally' S { split-window -c '#{pane_current_path}' -v -f }
bind -N 'Split pane vertically' v { split-window -c '#{pane_current_path}' -h }
bind -N 'Split window vertically' V { split-window -c '#{pane_current_path}' -h -f }
bind -N 'Kill the active pane' x { confirm -p 'kill-pane #{pane_index}? (y/n)' kill-pane }
bind -N 'Respawn the active pane' C-n { confirm -p 'respawn-pane #{pane_index}? (y/n)' 'respawn-pane -k' }
bind -N 'Toggle the marked pane' t { select-pane -m }
bind -N 'Clear the marked pane' T { select-pane -M }

# Pane Layout
bind -N 'Set the the even-horizontal layout' M-1 { select-layout even-horizontal }
bind -N 'Set the the even-vertical layout' M-2 { select-layout even-vertical }
bind -N 'Set the the main-horizontal layout' M-3 { select-layout main-horizontal }
bind -N 'Set the the main-vertical layout' M-4 { select-layout main-vertical }
bind -N 'Set the the tiled layout' M-5 { select-layout tiled }
bind -N 'Spread panes out evenly' E { select-layout -E }
bind -N 'Rotate through the panes' -r C-r { rotate-window }
bind -N 'Rotate through the panes in reverse' -r M-r { rotate-window -D }
bind -N 'Swap the active pane with the pane above' '}' { swap-pane -U }
bind -N 'Swap the active pane with the pane below' '{' { swap-pane -D }
bind -N 'Swap the active pane with a pane from a list' C-m { choose-tree -Z { swap-pane -t '%%' } }
bind -N 'Join the active pane with a window from a list, vertically' C-s { choose-tree -Z { join-pane -v -t '%%' } }
bind -N 'Join the active pane with a window from a list, horizontally' C-v { choose-tree -Z { join-pane -h -t '%%' } }
bind -N 'Zoom the active pane' z { resize-pane -Z }
bind -N 'Break pane out into a new window' Z { break-pane }

# Window Navigation
bind -N 'Select the last window' C-q { last-window }
bind -N 'Select the next window' -r . { next-window }
bind -N 'Select the previous window' -r , { previous-window }
bind -N 'Select the next window with an alert' -r > { next-window -a }
bind -N 'Select the previous window with an alert' -r < { previous-window -a }
bind -N 'Select window 1' 1  { select-window -t:=1 }
bind -N 'Select window 2' 2  { select-window -t:=2 }
bind -N 'Select window 3' 3  { select-window -t:=3 }
bind -N 'Select window 4' 4  { select-window -t:=4 }
bind -N 'Select window 5' 5  { select-window -t:=5 }
bind -N 'Select window 6' 6  { select-window -t:=6 }
bind -N 'Select window 7' 7  { select-window -t:=7 }
bind -N 'Select window 8' 8  { select-window -t:=8 }
bind -N 'Select window 9' 9  { select-window -t:=9 }
bind -N 'Select window 10' 0 { select-window -t:=10 }
bind -N 'Prompt for window index to select' g { command-prompt -W { select-window -t ':%%' } } # FIXME: 3.3 -T window-target
bind -N 'Choose a window from a list' c { choose-tree -Zw }
bind -N 'Search for a pane' f { command-prompt { find-window -Z -- '%%' } }

# Pane Navigation
bind -N 'Select leftward pane' h { if -F '#{pane_at_left}' '' { select-pane -L } }
bind -N 'Select downward pane' j { if -F '#{pane_at_bottom}' '' { select-pane -D } }
bind -N 'Select upward pane' k { if -F '#{pane_at_top}' '' { select-pane -U } }
bind -N 'Select rightward pane' l { if -F '#{pane_at_right}' '' { select-pane -R } }
bind -N 'Select leftward pane' -n C-h { if -b '#{E:@should_nav}' { send C-h } { if -F '#{pane_at_left}' '' { select-pane -L } } }
bind -N 'Select downward pane' -n C-j { if -b '#{E:@should_nav}' { send C-j } { if -F '#{pane_at_bottom}' '' { select-pane -D } } }
bind -N 'Select upward pane' -n C-k { if -b '#{E:@should_nav}' { send C-k } { if -F '#{pane_at_top}' '' { select-pane -U } } }
bind -N 'Select rightward pane' -n C-l { if -b '#{E:@should_nav}' { send C-l } { if -F '#{pane_at_right}' '' { select-pane -R } } }

bind -N 'Select last pane' -n C-\\ { if -b '#{E:@should_nav}' { send C-\\ } 'last-pane' }
bind -N 'Send C-h' C-h { send C-h }
bind -N 'Send C-j' C-j { send C-j }
bind -N 'Send C-k' C-k { send C-k }
bind -N 'Send C-l' C-l { send C-l }
bind -N 'Send C-\' C-\\ { send C-\\ }

# Pane Resizing
bind -N 'Resize pane left' -n M-h { if -b '#{E:@should_nav}' { send M-h } { resize-pane -L } }
bind -N 'Resize pane down' -n M-j { if -b '#{E:@should_nav}' { send M-j } { resize-pane -D } }
bind -N 'Resize pane up' -n M-k { if -b '#{E:@should_nav}' { send M-k } { resize-pane -U } }
bind -N 'Resize pane right' -n M-l { if -b '#{E:@should_nav}' { send M-l } { resize-pane -R } }
bind -N 'Send M-h' M-h { send M-h }
bind -N 'Send M-j' M-j { send M-j }
bind -N 'Send M-k' M-k { send M-k }
bind -N 'Send M-l' M-l { send M-l }

# Clipboard/Buffer Management
bind -N 'List all buffers' '=' { list-buffers }
bind -N 'Delete the most recent buffer' '-' { delete-buffer }
bind -N 'Paste the most recent buffer' p { paste-buffer -p -r }
bind -N 'Choose a buffer to paste from a list' P { choose-buffer -Z { paste-buffer -b '%%' -p -r } }
bind -N 'Load a buffer from the clipboard' M-p { run 'env PASTE_PROVIDERS=desktop clipboard-provider paste | tmux load-buffer -' }
bind -N 'Copy the most recent bufer to the clipboard' y { run 'tmux save-buffer - | #{copy-command}' }
bind -N 'Choose a buffer to save to the clipboard from a list' Y { choose-buffer -Z 'save-buffer -b "%%" - | #{copy-command}' }

# URL Selection
bind -N 'Open URLs from pane' C-o { run -b 'tmuxrl -t #{pane_id} -o' }
bind -N 'Open URLs from pane (including history)' M-o { run -b 'tmuxrl -t #{pane_id} -o -f' }
bind -N 'Yank URLs from pane' C-y { run -b 'tmuxrl -t #{pane_id} -y' }
bind -N 'Yank URLs from pane (including history)' M-y { run -b 'tmuxrl -t #{pane_id} -y -f' }

# Copy Mode
bind -N 'Enter copy mode' Escape { copy-mode }
bind -N 'Enter copy mode and scroll up' PgUp { copy-mode -e -u }
bind -N 'Enter copy mode and search up' ? { copy-mode; send ? }
bind -N 'Enter copy mode and search down' / { copy-mode; send -X history-top; send / }

# Copy Mode
bind -T copy-mode-vi q { send -X cancel }
bind -T copy-mode-vi C-c { send -X cancel }
bind -T copy-mode-vi r { send -X refresh-from-pane }
# bind -T copy-mode-vi M-p { send -x toggle-position } # FIXME: 3.3

# Copy Mode (Cursor)
bind -T copy-mode-vi C-h { send -X cursor-left }
bind -T copy-mode-vi BSpace { send -X cursor-left }
bind -T copy-mode-vi h { send -X cursor-left }
bind -T copy-mode-vi j { send -X cursor-down }
bind -T copy-mode-vi k { send -X cursor-up }
bind -T copy-mode-vi l { send -X cursor-right }
bind -T copy-mode-vi Up { send -X cursor-up }
bind -T copy-mode-vi Down { send -X cursor-down }
bind -T copy-mode-vi Left { send -X cursor-left }
bind -T copy-mode-vi Right { send -X cursor-right }

# Copy Mode (Mark)
bind -T copy-mode-vi X { send -X set-mark }
bind -T copy-mode-vi M-x { send -X jump-to-mark }

# Copy Mode (Scroll)
bind -T copy-mode-vi C-f { send -X page-down }
bind -T copy-mode-vi C-b { send -X page-up }
bind -T copy-mode-vi PgDn { send -X page-down }
bind -T copy-mode-vi PgUp { send -X page-up }
bind -T copy-mode-vi C-d { send -X halfpage-down }
bind -T copy-mode-vi C-u { send -X halfpage-up }
bind -T copy-mode-vi C-e { send -X scroll-down }
bind -T copy-mode-vi C-y { send -X scroll-up }
bind -T copy-mode-vi H { send -X top-line }
bind -T copy-mode-vi J { send -X scroll-down }
bind -T copy-mode-vi K { send -X scroll-up }
bind -T copy-mode-vi L { send -X bottom-line }
bind -T copy-mode-vi M { send -X middle-line }
bind -T copy-mode-vi C-Down { send -X scroll-down }
bind -T copy-mode-vi C-Up { send -X scroll-up }
bind -T copy-mode-vi g { send -X history-top }
bind -T copy-mode-vi G { send -X history-bottom }

# Copy Mode (Selection)
bind -T copy-mode-vi Escape { send -X clear-selection }
bind -T copy-mode-vi Space { send -X begin-selection }
bind -T copy-mode-vi v { send -X begin-selection }
bind -T copy-mode-vi V { send -X select-line }
bind -T copy-mode-vi C-v { send -X rectangle-toggle }
bind -T copy-mode-vi Enter { send -X copy-selection-and-cancel }
bind -T copy-mode-vi y { send -X copy-selection-and-cancel }
bind -T copy-mode-vi Y { send -X copy-pipe-and-cancel }
bind -T copy-mode-vi A { send -X append-selection-and-cancel }
bind -T copy-mode-vi D { send -X copy-end-of-line } # FIXME: 3.3 copy-end-of-line-and-cancel
bind -T copy-mode-vi p { send -X copy-selection-and-cancel; paste-buffer -p -r }

# Copy Mode (Search / Jump)
bind -T copy-mode-vi / { command-prompt -p '(search down)' { send -X search-forward '%%' } } # FIXME: 3.3 -T search
bind -T copy-mode-vi ? { command-prompt -p '(search up)' { send -X search-backward '%%' } } # FIXME: 3.3 -T search
bind -T copy-mode-vi f { command-prompt -1 -p '(jump forward)' { send -X jump-forward '%%' } }
bind -T copy-mode-vi F { command-prompt -1 -p '(jump backward)' { send -X jump-backward '%%' } }
bind -T copy-mode-vi t { command-prompt -1 -p '(jump to forward)' { send -X jump-to-forward '%%' } }
bind -T copy-mode-vi T { command-prompt -1 -p '(jump to backward)' { send -X jump-to-backward '%%'} }
bind -T copy-mode-vi '*' { send -XF { search-forward '#{copy_cursor_word}' } }
bind -T copy-mode-vi '#' { send -XF { search-backward '#{copy_cursor_word}' } }
bind -T copy-mode-vi '%' { send -X next-matching-bracket }
bind -T copy-mode-vi ':' { command-prompt -N -p '(goto line)' { send -X goto-line '%%' } }

# Copy Mode (Repeat)
bind -T copy-mode-vi n { send -X search-again }
bind -T copy-mode-vi N { send -X search-reverse }
bind -T copy-mode-vi ';' { send -X jump-again }
bind -T copy-mode-vi , { send -X jump-reverse }
bind -T copy-mode-vi 1 { command-prompt -N -p '(repeat)' -I1 { send -N '%%' } }
bind -T copy-mode-vi 2 { command-prompt -N -p '(repeat)' -I2 { send -N '%%' } }
bind -T copy-mode-vi 3 { command-prompt -N -p '(repeat)' -I3 { send -N '%%' } }
bind -T copy-mode-vi 4 { command-prompt -N -p '(repeat)' -I4 { send -N '%%' } }
bind -T copy-mode-vi 5 { command-prompt -N -p '(repeat)' -I5 { send -N '%%' } }
bind -T copy-mode-vi 6 { command-prompt -N -p '(repeat)' -I6 { send -N '%%' } }
bind -T copy-mode-vi 7 { command-prompt -N -p '(repeat)' -I7 { send -N '%%' } }
bind -T copy-mode-vi 8 { command-prompt -N -p '(repeat)' -I8 { send -N '%%' } }
bind -T copy-mode-vi 9 { command-prompt -N -p '(repeat)' -I9 { send -N '%%' } }

# Copy Mode (Motions)
bind -T copy-mode-vi 0 { send -X start-of-line }
bind -T copy-mode-vi '$' { send -X end-of-line }
bind -T copy-mode-vi ^ { send -X back-to-indentation }
bind -T copy-mode-vi b { send -X previous-word }
bind -T copy-mode-vi B { send -X previous-space }
bind -T copy-mode-vi w { send -X next-word }
bind -T copy-mode-vi W { send -X next-space }
bind -T copy-mode-vi e { send -X next-word-end }
bind -T copy-mode-vi E { send -X next-space-end }
bind -T copy-mode-vi o { send -X other-end }
bind -T copy-mode-vi '{' { send -X previous-paragraph }
bind -T copy-mode-vi '}' { send -X next-paragraph }

# Copy Mode (Mouse)
bind -T copy-mode-vi MouseDown1Pane { select-pane }
bind -T copy-mode-vi MouseDrag1Pane { select-pane; send -X begin-selection }
bind -T copy-mode-vi MouseDragEnd1Pane { send -X copy-selection-and-cancel }
bind -T copy-mode-vi WheelUpPane { select-pane; send -N5 -X scroll-up }
bind -T copy-mode-vi WheelDownPane { select-pane; send -N5 -X scroll-down }
bind -T copy-mode-vi DoubleClick1Pane { select-pane; send -X select-word; run -d0.3; send -X copy-selection-and-cancel }
bind -T copy-mode-vi TripleClick1Pane { select-pane; send -X select-line; run -d0.3; send -X copy-selection-and-cancel }

#
# Colors and Style
#

# Selection
set -gF mode-style 'reverse'

# Window
set -g window-style 'bg=default'
set -g window-active-style '#{window-style}'

# Pane
set -g pane-border-lines double
set -g pane-border-style 'fg={{ .nord.nord3 }},bg=default'
set -g pane-active-border-style '#{pane-border-style}'

# Messages
set -g message-style 'fg={{ .nord.nord0 }},bg={{ .nord.nord6 }}'
set -g message-command-style 'fg={{ .nord.nord0 }},bg={{ .nord.nord6 }}'

# Status Line
set -g status-style 'fg={{ .nord.nord4 }},bg={{ .nord.nord1 }}'
set -g status-left-style 'fg={{ .nord.nord6 }},bg={{ .nord.nord3 }}'
set -g status-right-style 'fg={{ .nord.nord6 }},bg={{ .nord.nord3 }}'
set -g @status-right-substyle 'fg={{ .nord.nord6 }}, bg={{ .nord.nord2 }}'
set -g window-status-style 'fg=default,bg=default'
set -g window-status-current-style 'fg={{ .nord.nord6 }},bg={{ .nord.nord3 }}'
set -g window-status-last-style '#{window-status-style}'
set -g window-status-activity-style 'bold'
set -g window-status-bell-style 'reverse'

# Clock
set -g clock-mode-style 12
set -g clock-mode-colour '{{ .nord.nord8 }}'

# Display Panes (Identify)
set -g display-panes-colour '{{ .nord.nord4 }}'
set -g display-panes-active-colour '{{ .nord.nord5 }}'

#
# Status Line
#

set -g status-interval 1

set -g status-left-length 15
set -g status-left '#{?client_prefix,#[reverse],} #{session_name}#{?session_many_attached,*,} #[#{status-style},noreverse] '

set -g status-right-length 70
set -g status-right '#[#{status-style}] #(tmux-mem-cpu-load -m 0 -g 0 -t 0 -a 0) #[#{@status-right-substyle}] #{window_index}:#{pane_index} (#{session_id} #{window_id} #{pane_id}) #[#{status-right-style}] %I:%M %p '

set -g window-status-format ' (#{window_index}) #{window_name}#{?window_zoomed_flag,+,} '
set -g window-status-current-format ' [#{window_index}] #{pane_title}#{?window_zoomed_flag,+,} '

# vi: ft=tmux
