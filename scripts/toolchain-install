#!/usr/bin/make -f

unexport MAKEFLAGS

if-exists = test -e $(1) && $(2) || $(3)
clone-or-update = git -C $(2) pull || git clone $(1) $(2)

#
# Toolchains
#

TOOLCHAINS = node python ruby rust
toolchains: $(TOOLCHAINS)

# nvm/node
NVM_ROOT = $(HOME)/.nvm
NVM = $(NVM_ROOT)/nvm.sh
nvm-run = . $(NVM); nvm $(1)
$(NVM):
	$(call clone-or-update,https://github.com/creationix/nvm,$(NVM_ROOT))
NODE_VERSION = v9.11.1
NPM = $(NVM_ROOT)/versions/node/$(NODE_VERSION)/bin/npm
$(NPM): $(NVM)
	$(call nvm-run,install $(NODE_VERSION))
node: $(NPM)

# Python
PYENV_ROOT = $(HOME)/.pyenv
PYENV = $(PYENV_ROOT)/bin/pyenv
pyenv-plugin = $(call clone-or-update,https://github.com/$(1),$(PYENV_ROOT)/plugins/$(shell basename $(1)))
$(PYENV):
	$(call clone-or-update,https://github.com/yyuu/pyenv,$(PYENV_ROOT))
	$(call pyenv-plugin,pyenv/pyenv-ccache)
	$(call pyenv-plugin,pyenv/pyenv-doctor)
	$(call pyenv-plugin,pyenv/pyenv-installer)
	$(call pyenv-plugin,pyenv/pyenv-pip-migrate)
	$(call pyenv-plugin,pyenv/pyenv-pip-rehash)
	$(call pyenv-plugin,massongit/pyenv-pip-update)
	$(call pyenv-plugin,pyenv/pyenv-update)
	$(call pyenv-plugin,pyenv/pyenv-virtualenv)
PYTHON3_VERSION = 3.6.5
PYTHON3 = $(PYENV_ROOT)/versions/$(PYTHON3_VERSION)/bin/python
$(PYTHON3): $(PYENV)
	$(PYENV) install -s $(PYTHON3_VERSION)
PYTHON2_VERSION = 2.7.14
PYTHON2 = $(PYENV_ROOT)/versions/$(PYTHON2_VERSION)/bin/python
$(PYTHON2): $(PYENV)
	$(PYENV) install -s $(PYTHON2_VERSION)
python: $(PYTHON2) $(PYTHON3)

# Ruby
RBENV_ROOT = $(HOME)/.rbenv
RBENV = $(RBENV_ROOT)/bin/rbenv
rbenv-plugin = $(call clone-or-update,https://github.com/$(1),$(RBENV_ROOT)/plugins/$(shell basename $(1)))
$(RBENV):
	$(call clone-or-update,https://github.com/rbenv/rbenv,$(RBENV_ROOT))
	$(call rbenv-plugin,rbenv/ruby-build)
	$(call rbenv-plugin,ianheggie/rbenv-binstubs)
	$(call rbenv-plugin,yyuu/rbenv-ccache)
	$(call rbenv-plugin,tpope/rbenv-communal-gems)
	$(call rbenv-plugin,tpope/rbenv-ctags)
	$(call rbenv-plugin,rbenv/rbenv-each)
	$(call rbenv-plugin,rbenv/rbenv-installer)
	$(call rbenv-plugin,rkh/rbenv-update)
	$(call rbenv-plugin,mislav/rbenv-user-gems)
RUBY_VERSION = 2.5.1
GEM = $(RBENV_ROOT)/versions/$(RUBY_VERSION)/bin/gem
$(GEM): $(RBENV)
	$(RBENV) install -s $(RUBY_VERSION)
ruby: $(GEM)

# Rust
CARGO_ROOT = $(HOME)/.cargo
CARGO = $(CARGO_ROOT)/bin/cargo
$(CARGO):
	curl https://sh.rustup.rs -fsSL | sh -s -- -y --no-modify-path --default-toolchain nightly
	$(CARGO_ROOT)/bin/rustup component add rustfmt-preview rls-preview
rust: $(CARGO)

#
# Tools
#

TOOLS = clippy fish fzf neovim ripgrep
tools: $(TOOLS)

# cargo-clippy
CLIPPY = $(CARGO_ROOT)/bin/cargo-clippy
$(CLIPPY):
	$(call if-exists,$(CLIPPY),true,$(CARGO) install clippy)
clippy: $(CARGO) $(CLIPPY)

# fish (fisherman)
FISH_CONFIG = $(HOME)/.config/fish
FISHER = $(FISH_CONFIG)/functions/fisher.fish
fisher-plugin = fish -c "fisher $(1)"
$(FISHER):
	curl https://git.io/fisher -fsSLo ~/.config/fish/functions/fisher.fish
	$(call fisher-plugin,oh-my-fish/plugin-bang-bang)
	$(call fisher-plugin,edc/bass)
	$(call fisher-plugin,fisherman/fzf)
	$(call fisher-plugin,fisherman/nvm)
	$(call fisher-plugin,neersighted/pyenv@patch-1)
	$(call fisher-plugin,neersighted/rbenv@patch-1)
	$(call fisher-plugin,oh-my-fish/plugin-sudope)
	$(call fisher-plugin,fisherman/z)
fish: $(FISHER)

# fzf
FZF_ROOT = $(HOME)/.fzf
FZF = $(FZF_ROOT)/bin/fzf
$(FZF):
	$(call clone-or-update,https://github.com/junegunn/fzf.git,$(FZF_ROOT))
	$(FZF_ROOT)/install --bin
fzf: $(FZF)

# neovim (rplugin providers)
NEOVIM3 = $(PYENV_ROOT)/versions/neovim3/bin/python
$(NEOVIM3): $(PYTHON3)
	$(call if-exists,$(NEOVIM3),true,$(PYENV) virtualenv $(PYTHON3_VERSION) neovim3)
NEOVIM2 = $(PYENV_ROOT)/versions/neovim2/bin/python
$(NEOVIM2): $(PYTHON2)
	$(call if-exists,$(NEOVIM2),true,$(PYENV) virtualenv $(PYTHON2_VERSION) neovim2)
NEOVIM_CONFIG = $(HOME)/.config/nvim/local.vim
$(NEOVIM_CONFIG): $(NPM) $(NEOVIM3) $(NEOVIM2) $(GEM)
	$(call nvm-run,exec $(NODE_VERSION) npm install -g neovim)
	$(GEM) install neovim && $(RBENV) rehash
	$(NEOVIM3) -m pip install neovim
	$(NEOVIM2) -m pip install neovim
	echo '#! /usr/bin/env fish\n__nvm_run "neovim-node-host" $$argv' > ~/.local/bin/neovim-node-host
	chmod +x ~/.local/bin/neovim-node-host
	echo "let g:python3_host_prog = '$(NEOVIM3)'" > $(NEOVIM_CONFIG)
	echo "let g:python_host_prog = '$(NEOVIM2)'" >> $(NEOVIM_CONFIG)
neovim: $(NEOVIM_CONFIG)

# ripgrep
RIPGREP = $(CARGO_ROOT)/bin/rg
$(RIPGREP):
	$(call if-exists,$(RIPGREP),true,$(CARGO) install ripgrep)
ripgrep rg: $(CARGO) $(RIPGREP)

#
# Other Targets
#

ALL = $(TOOLS) $(TOOLCHAINS)
TARGETS = toolchains tools all

all: toolchains tools
help:
	@echo "TARGETS: $(TARGETS)"
	@echo "AVAILABLE TOOLCHAINS: $(TOOLCHAINS)"
	@echo "AVAILABLE TOOLS: $(TOOLS)"

.DEFAULT_GOAL := help
.PHONY: $(ALL) $(TARGETS) $(.DEFAULT_GOAL)
