#!/usr/bin/make -f

if-exists = test -e $(1) && $(2) || $(2)
clone-or-update = git -C $(2) pull || git clone $(1) $(2)

NVM_ROOT = $(HOME)/.nvm
NVM = $(NVM_ROOT)/nvm.sh

node: $(NVM)
$(NVM):
	$(call clone-or-update,https://github.com/creationix/nvm,$(NVM_ROOT))

PYENV_ROOT = $(HOME)/.pyenv
PYENV = $(PYENV_ROOT)/bin/pyenv

python: $(PYENV)
$(PYENV):
	$(call clone-or-update,https://github.com/yyuu/pyenv,$(PYENV_ROOT))
	$(call clone-or-update,https://github.com/pyenv/pyenv-ccache,$(PYENV_ROOT)/plugins/pyenv-ccache)
	$(call clone-or-update,https://github.com/pyenv/pyenv-doctor,$(PYENV_ROOT)/plugins/pyenv-doctor)
	$(call clone-or-update,https://github.com/pyenv/pyenv-installer,$(PYENV_ROOT)/plugins/pyenv-installer)
	$(call clone-or-update,https://github.com/pyenv/pyenv-pip-migrate,$(PYENV_ROOT)/plugins/pyenv-pip-migrate)
	$(call clone-or-update,https://github.com/pyenv/pyenv-pip-rehash,$(PYENV_ROOT)/plugins/pyenv-pip-rehash)
	$(call clone-or-update,https://github.com/massongit/pyenv-pip-update,$(PYENV_ROOT)/plugins/pyenv-pip-update)
	$(call clone-or-update,https://github.com/pyenv/pyenv-update,$(PYENV_ROOT)/plugins/pyenv-update)
	$(call clone-or-update,https://github.com/pyenv/pyenv-virtualenv,$(PYENV_ROOT)/plugins/pyenv-virtualenv)

PYTHON3_VERSION = 3.6.5
PYTHON2_VERSION = 2.7.14
PYTHON3 = $(PYENV_ROOT)/versions/$(PYTHON3_VERSION)/bin/python
PYTHON2 = $(PYENV_ROOT)/versions/$(PYTHON2_VERSION)/bin/python

$(PYTHON3): $(PYENV)
	$(PYENV) install -s $(PYTHON3_VERSION)
$(PYTHON2): $(PYENV)
	$(PYENV) install -s $(PYTHON2_VERSION)

RBENV_ROOT = $(HOME)/.rbenv
RBENV = $(RBENV_ROOT)/bin/rbenv

ruby: $(RBENV)
$(RBENV):
	$(call clone-or-update,https://github.com/rbenv/rbenv,$(RBENV_ROOT))
	$(call clone-or-update,https://github.com/rbenv/ruby-build,$(RBENV_ROOT)/plugins/ruby-build)
	$(call clone-or-update,https://github.com/ianheggie/rbenv-binstubs,$(RBENV_ROOT)/plugins/rbenv-binstubs)
	$(call clone-or-update,https://github.com/yyuu/rbenv-ccache,$(RBENV_ROOT)/plugins/rbenv-ccache)
	$(call clone-or-update,https://github.com/tpope/rbenv-communal-gems,$(RBENV_ROOT)/plugins/rbenv-communal-gems)
	$(call clone-or-update,https://github.com/tpope/rbenv-ctags,$(RBENV_ROOT)/plugins/rbenv-ctags)
	$(call clone-or-update,https://github.com/rbenv/rbenv-each,$(RBENV_ROOT)/plugins/rbenv-each)
	$(call clone-or-update,https://github.com/rbenv/rbenv-installer,$(RBENV_ROOT)/plugins/rbenv-installer)
	$(call clone-or-update,https://github.com/rkh/rbenv-update,$(RBENV_ROOT)/plugins/rbenv-update)
	$(call clone-or-update,https://github.com/mislav/rbenv-user-gems,$(RBENV_ROOT)/plugins/rbenv-user-gems)

RUBY_VERSION = 2.5.1
RUBY = $(RBENV_ROOT)/versions/$(RUBY_VERSION)/bin/ruby
GEM = $(RBENV_ROOT)/versions/$(RUBY_VERSION)/bin/gem
$(RUBY) $(GEM): $(RBENV)
	$(RBENV) install -s $(RUBY_VERSION)


CARGO_ROOT = $(HOME)/.cargo
RUSTUP = $(CARGO_ROOT)/bin/rustup
CARGO = $(CARGO_ROOT)/bin/cargo

rust: $(RUSTUP)
$(RUSTUP) $(CARGO):
	curl https://sh.rustup.rs -fsSL | sh -s -- -y --no-modify-path --default-toolchain nightly
	$(RUSTUP) component add rustfmt-preview rls-preview

TOOLCHAINS = node python ruby rust

toolchains: $(TOOLCHAINS)


CLIPPY = $(CARGO_ROOT)/bin/cargo-clippy

clippy: $(CARGO) $(CLIPPY)
$(CLIPPY):
	$(call if-exists,$(CLIPPY),true,$(CARGO) install clippy)

FISH_CONFIG = $(HOME)/.config/fish
FISHER = $(FISH_CONFIG)/functions/fisher.fish

fish: $(FISHER)
$(FISHER):
	curl https://git.io/fisher -fsSLo ~/.config/fish/functions/fisher.fish
	fish -c "fisher oh-my-fish/plugin-bang-bang"
	fish -c "fisher edc/bass"
	fish -c "fisher fisherman/fzf"
	fish -c "fisher fisherman/nvm"
	fish -c "fisher neersighted/pyenv@patch-1"
	fish -c "fisher neersighted/rbenv@patch-1"
	fish -c "fisher oh-my-fish/plugin-sudope"
	fish -c "fisher fisherman/z"

FZF_ROOT = $(HOME)/.fzf
FZF = $(FZF_ROOT)/bin/fzf

fzf: $(FZF)
$(FZF):
	$(call clone-or-update,https://github.com/junegunn/fzf.git,$(FZF_ROOT))
	$(FZF_ROOT)/install --bin

NEOVIM_CONFIG = $(HOME)/.config/nvim/local.vim
NEOVIM3 = $(PYENV_ROOT)/versions/neovim3/bin/python
NEOVIM2 = $(PYENV_ROOT)/versions/neovim2/bin/python

$(NEOVIM3): $(PYTHON3)
	$(call if-exists,$(NEOVIM3),true,$(PYENV) virtualenv $(PYTHON3_VERSION) neovim3)
$(NEOVIM2): $(PYTHON2)
	$(call if-exists,$(NEOVIM2),true,$(PYENV) virtualenv $(PYTHON2_VERSION) neovim2)

neovim: $(GEM) $(NEOVIM3) $(NEOVIM2) $(NEOVIM_CONFIG)
$(NEOVIM_CONFIG):
	$(GEM) install neovim && $(RBENV) rehash
	$(NEOVIM3) -m pip install neovim
	$(NEOVIM2) -m pip install neovim
	echo "let g:python3_host_prog = '$(NEOVIM3)'" > $(NEOVIM_CONFIG)
	echo "let g:python_host_prog = '$(NEOVIM2)'" >> $(NEOVIM_CONFIG)

RIPGREP = $(CARGO_ROOT)/bin/rg

ripgrep rg: $(CARGO) $(RIPGREP)
$(RIPGREP):
	$(call if-exists,$(RIPGREP),true,$(CARGO) install ripgrep)

TOOLS = clippy fish fzf neovim ripgrep

tools: $(TOOLS)


ALL = $(TOOLS) $(TOOLCHAINS)
TARGETS = toolchains tools all

all: toolchains tools
help:
	@echo "TARGETS: $(TARGETS)"
	@echo "AVAILABLE TOOLCHAINS: $(TOOLCHAINS)"
	@echo "AVAILABLE TOOLS: $(TOOLS)"

.DEFAULT_GOAL := help
.PHONY: $(ALL) $(TARGETS) $(.DEFAULT_GOAL)
