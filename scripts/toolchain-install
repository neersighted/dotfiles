#!/usr/bin/make -f

unexport MAKEFLAGS

clone-or-update = git -C $(2) pull || git clone $(1) $(2)

#
# Toolchains
#

TOOLCHAINS = node python ruby rust
toolchains: $(TOOLCHAINS)


# Node.js
NVM_ROOT = $(HOME)/.nvm
NVM = $(NVM_ROOT)/nvm.sh
$(NVM):
	$(call clone-or-update,https://github.com/creationix/nvm,$(NVM_ROOT))

NODE_VERSION = v9.11.1
NODE = $(NVM_ROOT)/versions/node/$(NODE_VERSION)/bin/node
$(NODE): $(NVM)
	sh -c ". $(NVM) && nvm install $(NODE_VERSION)"
	sh -c ". $(NVM) && nvm alias default $(NODE_VERSION)"

NPM = $(NVM_ROOT)/versions/node/$(NODE_VERSION)/bin/npm
$(NPM): $(NODE)

node: $(NPM)


# Python
PYENV_ROOT = $(HOME)/.pyenv
PYENV = $(PYENV_ROOT)/bin/pyenv
pyenv-plugin = $(call clone-or-update,https://github.com/$(1),$(PYENV_ROOT)/plugins/$(shell basename $(1)))
$(PYENV):
	$(call clone-or-update,https://github.com/yyuu/pyenv,$(PYENV_ROOT))
	$(call pyenv-plugin,pyenv/pyenv-ccache)
	$(call pyenv-plugin,pyenv/pyenv-doctor)
	$(call pyenv-plugin,pyenv/pyenv-installer)
	$(call pyenv-plugin,pyenv/pyenv-pip-migrate)
	$(call pyenv-plugin,pyenv/pyenv-pip-rehash)
	$(call pyenv-plugin,massongit/pyenv-pip-update)
	$(call pyenv-plugin,pyenv/pyenv-update)
	$(call pyenv-plugin,pyenv/pyenv-virtualenv)

PYTHON3_VERSION = 3.6.5
PYTHON3 = $(PYENV_ROOT)/versions/$(PYTHON3_VERSION)/bin/python
$(PYTHON3): $(PYENV)
	$(PYENV) install -s $(PYTHON3_VERSION)
	$(PYENV) global $(PYTHON3_VERSION)

PIP3 = $(PYENV_ROOT)/versions/$(PYTHON3_VERSION)/bin/pip
$(PIP3): $(PYTHON3)

PYTHON2_VERSION = 2.7.14
PYTHON2 = $(PYENV_ROOT)/versions/$(PYTHON2_VERSION)/bin/python
$(PYTHON2): $(PYENV)
	$(PYENV) install -s $(PYTHON2_VERSION)

PIP2 = $(PYENV_ROOT)/versions/$(PYTHON2_VERSION)/bin/pip
$(PIP2): $(PYTHON2)

PIPENV = $(PYENV_ROOT)/shims/pipenv
$(PIPENV): $(PIP2) $(PIP3)
	$(PIP2) install -U pipenv
	$(PIP3) install -U pipenv
	$(PYENV) rehash

FLAKE8 = $(PYENV_ROOT)/shims/flake8
$(FLAKE8): $(PIP2) $(PIP3)
	$(PIP2) install -U flake8
	$(PIP3) install -U flake8
	$(PYENV) rehash

MYPY = $(PYENV_ROOT)/shims/mypy
$(MYPY): $(PIP3)
	$(PIP3) install -U mypy
	$(PYENV) rehash

python: $(PIP2) $(PIP3) $(PIPENV) $(FLAKE8) $(MYPY)


# Ruby
RBENV_ROOT = $(HOME)/.rbenv
RBENV = $(RBENV_ROOT)/bin/rbenv
rbenv-plugin = $(call clone-or-update,https://github.com/$(1),$(RBENV_ROOT)/plugins/$(shell basename $(1)))
$(RBENV):
	$(call clone-or-update,https://github.com/rbenv/rbenv,$(RBENV_ROOT))
	$(call rbenv-plugin,rbenv/ruby-build)
	$(call rbenv-plugin,ianheggie/rbenv-binstubs)
	$(call rbenv-plugin,yyuu/rbenv-ccache)
	$(call rbenv-plugin,tpope/rbenv-communal-gems)
	$(call rbenv-plugin,tpope/rbenv-ctags)
	$(call rbenv-plugin,rbenv/rbenv-each)
	$(call rbenv-plugin,rbenv/rbenv-installer)
	$(call rbenv-plugin,rkh/rbenv-update)
	$(call rbenv-plugin,mislav/rbenv-user-gems)

RUBY_VERSION = 2.5.1
RUBY = $(RBENV_ROOT)/versions/$(RUBY_VERSION)/bin/ruby
$(RUBY): $(RBENV)
	$(RBENV) install -s $(RUBY_VERSION)
	$(RBENV) global $(RUBY_VERSION)

GEM = $(RBENV_ROOT)/versions/$(RUBY_VERSION)/bin/gem
$(GEM): $(RUBY)

BUNDLER = $(RBENV_ROOT)/shims/bundle
$(BUNDLER):
	$(GEM) install bundler
	$(RBENV) rehash

REEK = $(RBENV_ROOT)/shims/reek
$(REEK):
	$(GEM) install reek
	$(RBENV) rehash

RUBOCOP = $(RBENV_ROOT)/shims/rubocop
$(RUBOCOP):
	$(GEM) install rubocop
	$(RBENV) rehash

ruby: $(GEM) $(BUNDLER) $(REEK) $(RUBOCOP)


# Rust
CARGO_ROOT = $(HOME)/.cargo
RUSTUP = $(CARGO_ROOT)/bin/rustup
$(RUSTUP):
	curl https://sh.rustup.rs -fsSL | sh -s -- -y --no-modify-path --default-toolchain nightly
	$(RUSTUP) component add rustfmt-preview rls-preview

CARGO = $(CARGO_ROOT)/bin/cargo
$(CARGO): $(RUSTUP)

CARGO_UPDATE = $(CARGO_ROOT)/bin/cargo-install-update
$(CARGO_UPDATE): $(CARGO)
	test -e $(CARGO_UPDATE) && $(CARGO) install-update cargo-update || $(CARGO) install cargo-update

CARGO_WATCH = $(CARGO_ROOT)/bin/cargo-watch
$(CARGO_WATCH): $(CARGO) $(CARGO_UPDATE)
	test -e $(CARGO_WATCH) && $(CARGO) install-update cargo-watch || $(CARGO) install cargo-watch

CARGO_CLIPPY = $(CARGO_ROOT)/bin/cargo-clippy
$(CARGO_CLIPPY): $(CARGO) $(CARGO_UPDATE)
	test -e $(CARGO_CLIPPY) && $(CARGO) install-update clippy || $(CARGO) install clippy

rust: $(CARGO) $(CARGO_CLIPPY) $(CARGO_UPDATE) $(CARGO_WATCH)


#
# Tools
#

TOOLS = fish fzf neovim ripgrep
tools: $(TOOLS)


# fish (fisherman)
FISH_CONFIG = $(HOME)/.config/fish
FISHER = $(FISH_CONFIG)/functions/fisher.fish
fisher-plugin = fish -c "fisher $(1)"
$(FISHER):
	curl https://git.io/fisher -fsSLo ~/.config/fish/functions/fisher.fish
	$(call fisher-plugin,oh-my-fish/plugin-bang-bang)
	$(call fisher-plugin,edc/bass)
	$(call fisher-plugin,fisherman/fzf)
	$(call fisher-plugin,fisherman/nvm)
	$(call fisher-plugin,fisherman/pipenv)
	$(call fisher-plugin,neersighted/pyenv@patch-1)
	$(call fisher-plugin,neersighted/rbenv@patch-1)
	$(call fisher-plugin,oh-my-fish/plugin-sudope)
	$(call fisher-plugin,fisherman/z)

fish: $(FISHER)


# fzf
FZF_ROOT = $(HOME)/.fzf
FZF = $(FZF_ROOT)/bin/fzf
$(FZF):
	$(call clone-or-update,https://github.com/junegunn/fzf.git,$(FZF_ROOT))
	$(FZF_ROOT)/install --bin

fzf: $(FZF)


# neovim (rplugin providers)
NEOVIMND = ~/.local/bin/neovim-node-host
$(NEOVIMND): $(NODE)
	$(NODE) $(NPM) install -g neovim
	echo '#! /usr/bin/env fish\n__nvm_run "neovim-node-host" $$argv' > $(NEOVIMND)
	chmod +x $(NEOVIMND)

NEOVIMPY3_ROOT = $(PYENV_ROOT)/versions/neovim3
NEOVIMPY3 = $(NEOVIMPY3_ROOT)/bin/python
$(NEOVIMPY3): $(PYTHON3)
	test -e $(NEOVIMPY3) || $(PYENV) virtualenv $(PYTHON3_VERSION) neovim3
	$(NEOVIMPY3) -m pip install -U neovim flake8 mypy pylint

NEOVIMPY2_ROOT = $(PYENV_ROOT)/versions/neovim2
NEOVIMPY2 = $(NEOVIMPY2_ROOT)/bin/python
$(NEOVIMPY2): $(PYTHON2)
	test -e $(NEOVIMPY2) || $(PYENV) virtualenv $(PYTHON2_VERSION) neovim2
	$(NEOVIMPY2) -m pip install -U neovim

NEOVIMRB = $(RBENV_ROOT)/shims/neovim-ruby-host
$(NEOVIMRB): $(RUBY)
	$(GEM) install neovim
	$(RBENV) rehash

NEOVIM_CONFIG = $(HOME)/.config/nvim/local.vim
$(NEOVIM_CONFIG): $(NEOVIMPY2) $(NEOVIMPY3)
	echo "let g:python3_host_prog = '$(NEOVIMPY3)'" > $(NEOVIM_CONFIG)
	echo "let g:python_host_prog = '$(NEOVIMPY2)'" >> $(NEOVIM_CONFIG)
	echo "let g:ale_python_flake8_executable = '$(NEOVIMPY3_ROOT)/bin/flake8'" >> $(NEOVIM_CONFIG)
	echo "let g:ale_python_mypy_executable = '$(NEOVIMPY3_ROOT)/bin/mypy'" >> $(NEOVIM_CONFIG)
	echo "let g:ale_python_pylint_executable = '$(NEOVIMPY3_ROOT)/bin/pylint'" >> $(NEOVIM_CONFIG)

neovim: $(NEOVIMND) $(NEOVIMPY2) $(NEOVIMPY3) $(NEOVIMRB) $(NEOVIM_CONFIG)


# ripgrep
RIPGREP = $(CARGO_ROOT)/bin/rg
$(RIPGREP):
	test -e $(RIPGREP) && $(CARGO) install ripgrep || $(CARGO) install-update ripgrep

ripgrep rg: $(CARGO) $(RIPGREP)


#
# Other Targets
#

ALL = $(TOOLS) $(TOOLCHAINS)
TARGETS = toolchains tools all

all: toolchains tools
help:
	@echo "TARGETS: $(TARGETS)"
	@echo "AVAILABLE TOOLCHAINS: $(TOOLCHAINS)"
	@echo "AVAILABLE TOOLS: $(TOOLS)"

.DEFAULT_GOAL := help
.PHONY: $(ALL) $(TARGETS) $(.DEFAULT_GOAL)
