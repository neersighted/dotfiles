#!/usr/bin/env bash
# shellcheck disable=SC2155

set -e

section() {
  printf "\n%s%s%s\n" "$(tput setaf 4)" "$@" "$(tput sgr0)"
}

endsection() {
  :
}

info() {
  printf "%s%s%s\n" "$(tput setaf 2)" "$@" "$(tput sgr0)"
}

important() {
  printf "%s%s%s\n" "$(tput setaf 5)" "$@" "$(tput sgr0)"
}


important "Bootstrapping environment..."

#
# Environment
#

# asdf
section "asdf"
  if [ ! -d "$HOME/.asdf" ]; then
    info "Installing asdf..."
    git clone https://github.com/asdf-vm/asdf "$HOME/.asdf"
  fi

  source "$HOME/.asdf/asdf.sh"

  info "Updating asdf..."
  asdf update

  install_asdf_plugin() {
    local name=$1
    local url=$2

    if ! asdf list | grep -Fq "$name"; then
      info "Installing $name support for asdf..."
      asdf plugin-add "$name" "$url"
    else
      info "Updating asdf $name support..."
      asdf plugin-update "$name"
    fi
  }

  install_asdf_language() {
    local language=$1
    local query=$2

    local version="$(asdf list-all "$language" | grep -E "$query" | tail -1)"

    if ! asdf list "$language" | grep -Fq "$version"; then
      info "Installing $language $version..."
      asdf install "$language" "$version"
    fi

    info "Activated $language $version..."
    asdf global "$language" "$version"
  }


  # asdf plugins
  install_asdf_plugin "golang" "https://github.com/kennyp/asdf-golang"
  install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs"
  install_asdf_plugin "python" "https://github.com/neersighted/asdf-python"
  install_asdf_plugin "ruby"   "https://github.com/neersighted/asdf-ruby"

  export GNUPGHOME="$HOME/.asdf/keyring"
  if [ ! -d "$GNUPGHOME" ]; then
    info "Bootstrapping asdf trust..."

    mkdir -p "$GNUPGHOME"
    chmod 0700 "$GNUPGHOME"
    source "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
  fi
endsection


section "Go"
  install_asdf_language "golang" "^1.10.[0-9]$"

  install_go_tool() {
    local target=$1

    info "Installing/updating $target using go get..."
    go get -u "github.com/$target"
    asdf reshim golang
  }
endsection


section "Node.js"
  install_asdf_language "nodejs"
endsection


section "Python"
  install_asdf_language "python" "^2.7.[0-9]+$"
  PYTHON2="$(asdf which python)"
  install_asdf_language "python" "^3.6.[0-9]+$"
  PYTHON3="$(asdf which python)"

  if ! command -v pipsi >/dev/null; then
    info "Installing pipsi..."
    curl http://git.io/get-pipsi -fsSL | python - --src=git+https://github.com/mitsuhiko/pipsi.git
    echo "{\"name\": \"pipsi\", \"version\": \"0.10.dev\", \"scripts\": [\"$HOME/.local/bin/pipsi\"]}" > "$HOME/.local/venvs/pipsi/package_info.json" # FIXME: remove when pipsi bug is fixed
  fi

  install_python_tool() {
    local target=$1

    info "Installing/updating $target using pipsi..."
    if ! pipsi list | grep "$target" >/dev/null; then
      pipsi install "$target"
    else
      pipsi upgrade "$target"
    fi
  }

  install_python_tool pylint
  install_python_tool flake8
  install_python_tool mypy
  install_python_tool pipenv
endsection


section "Ruby"
  install_asdf_language "ruby" "^2.5.[0-9]+$"
endsection


section "Rust"
  if ! command -v rustup >/dev/null; then
    info "Setting up Rust toolchain..."
    curl https://sh.rustup.rs -fsSL | sh -s -- -y --no-modify-path --default-toolchain nightly

    export PATH="$HOME/.cargo/bin:$PATH"
    rustup component add rustfmt-preview rls-preview
  else
    info "Updating Rust toolchain..."
    rustup update
  fi

  install_rust_tool() {
    local target=$1

    info "Installing/updating $target using cargo..."
    cargo install-update -i "$target" || cargo install "$target"
  }

  install_rust_tool "cargo-update"
  install_rust_tool "cargo-watch"
  install_rust_tool "clippy"
endsection


#
# Tools
#

section "fish"
  if [ ! -e "$HOME/.config/fish/functions/fisher.fish" ]; then
    info "Setting up fisherman..."
    curl https://git.io/fisher -fsSLo "$HOME/.config/fish/functions/fisher.fish"
  fi

  info "Installing/updating fish plugins..."
  fish -c fisher <<FISHFILE
omf/bang-bang
fzf
pipenv
omf/sudope
z
FISHFILE
endsection


section "Neovim"
  if ! command -v neovim-node-host >/dev/null; then
    info "Installing Node.js Neovim provider..."
    npm install -g neovim
    asdf reshim nodejs
  fi
  if ! $PYTHON2 -c "import neovim" 2>/dev/null; then
    info "Installing Python 2 Neovim provider..."
    $PYTHON2 -m pip install neovim
  fi
  if ! $PYTHON3 -c "import neovim" 2>/dev/null; then
    info "Installing Python 3 Neovim provider..."
    $PYTHON3 -m pip install neovim
  fi
  if ! command -v neovim-ruby-host >/dev/null; then
    info "Installing Ruby Neovim provider..."
    gem install neovim
    asdf reshim ruby
  fi

  info "Resolving Python paths..."
  NEOVIM_CONFIG="$HOME/.config/nvim/local.vim"
  echo "let g:python3_host_prog = '$PYTHON3'" > "$NEOVIM_CONFIG"
  echo "let g:python_host_prog = '$PYTHON2'" >> "$NEOVIM_CONFIG"
endsection


section "CLI Tools"
  install_rust_tool exa
  install_rust_tool fd-find
  install_go_tool junegunn/fzf
  install_rust_tool pretty-git-prompt
  install_rust_tool ripgrep
endsection

printf "\n"
important "Done! Restart your shell!"
