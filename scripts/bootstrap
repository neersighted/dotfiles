#!/bin/sh
# shellcheck disable=SC2039

set -e

section() {
  printf "\n\e[0;34m$@\033[0m\n"
}

endsection() {
  :
}

info() {
  printf "\e[0;32m$@\033[0m\n"
}

important() {
  printf "\e[0;35m$@\033[0m\n"
}

getshell () {
  local shell
  if command -v dscacheutil >/dev/null; then
    shell=$(dscacheutil -q user -a name "$USER" | grep shell | cut -d: -f2)
  else
    shell=$(getent passwd "$USER" | awk -F: '{print $NF}')
  fi

  basename "$shell"
}


important "Bootstrapping environment..."

#
# Environment
#

# asdf
section "asdf"
  if [ ! -d "$HOME/.asdf" ]; then
    info "Installing asdf..."
    git clone https://github.com/asdf-vm/asdf "$HOME/.asdf"
  fi

  if ! command -v asdf >/dev/null; then
    export PATH="$HOME/.asdf/bin:$HOME/.asdf/shims:$PATH"
  fi

  info "Updating asdf to latest tag..."
  asdf update

  install_asdf_plugin() {
    local name=$1
    local url=$2

    if ! asdf plugin-list | grep -Fq "$name"; then
      info "Installing $name support for asdf..."
      asdf plugin-add "$name" "$url"
    else
      info "Updating asdf $name support..."
      asdf plugin-update "$name"
    fi
  }

  install_asdf_language() {
    local language=$1
    shift

    asdf list-all "$language" >/dev/null # TODO: needed?

    local versions
    for query in "$@"; do
      version=$(asdf list-all "$language" | grep -E "$query" | tail -1)
      versions="$versions $version"

      if ! asdf list "$language" | grep -Fq "$version"; then
        info "Installing $language $version..."
        asdf install "$language" "$version"
        asdf reshim "$language" "$version"
      fi
    done

    info "Activating $language$versions..."
    # shellcheck disable=SC2086
    asdf global "$language" $versions
  }


  # asdf plugins
  install_asdf_plugin "golang" "https://github.com/kennyp/asdf-golang"
  install_asdf_plugin "nodejs" "https://github.com/neersighted/asdf-nodejs"
  install_asdf_plugin "python" "https://github.com/neersighted/asdf-python"
  install_asdf_plugin "ruby"   "https://github.com/neersighted/asdf-ruby"

  export GNUPGHOME="$HOME/.asdf/keyring"
  if [ ! -d "$GNUPGHOME" ]; then
    info "Bootstrapping asdf trust..."

    mkdir -p "$GNUPGHOME"
    chmod 0700 "$GNUPGHOME"
    sh "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
  fi
endsection


section "Go"
  install_asdf_language "golang" "^1.10.[0-9]$"

  install_go_tool() {
    local target=$1

    info "Installing/updating $target using go get..."
    go get -u "github.com/$target"
  }

  install_go_tool nsf/gocode
  install_go_tool golang/lint/golint
endsection


section "Node.js"
  install_asdf_language "nodejs" "^9.[0-9]+.[0-9]$"
endsection


section "Python"
  install_asdf_language "python" "^3.6.[0-9]+$" "^2.7.[0-9]+$"

  if ! command -v pipsi >/dev/null; then
    info "Installing pipsi..."
    curl http://git.io/get-pipsi -fsSL | python - --src=git+https://github.com/mitsuhiko/pipsi.git
    echo "{\"name\": \"pipsi\", \"version\": \"0.10.dev\", \"scripts\": [\"$HOME/.local/bin/pipsi\"]}" > "$HOME/.local/venvs/pipsi/package_info.json" # FIXME: remove when pipsi bug is fixed
  fi

  install_python_tool() {
    local target=$1

    info "Installing/updating $target using pipsi..."
    if ! pipsi list | grep -F "$target" >/dev/null; then
      pipsi install "$target"
    else
      pipsi upgrade "$target"
    fi
  }

  install_python_tool pylint
  install_python_tool flake8
  install_python_tool mypy
  install_python_tool pipenv
endsection


section "Ruby"
  install_asdf_language "ruby" "^2.5.[0-9]+$"
endsection


section "Rust"
  if ! command -v rustup >/dev/null; then
    info "Setting up Rust toolchain..."
    curl https://sh.rustup.rs -fsSL | sh -s -- -y --no-modify-path --default-toolchain nightly

    export PATH="$HOME/.cargo/bin:$PATH"
    rustup component add rustfmt-preview rls-preview
  else
    info "Updating Rust toolchain..."
    rustup update
  fi

  install_rust_tool() {
    local target=$1

    info "Installing/updating $target using cargo..."
    if command -v cargo-install-update >/dev/null; then
      cargo install-update -i "$target"
    else
      cargo install "$target"
    fi
  }

  install_rust_tool "cargo-update"
  install_rust_tool "cargo-watch"
  install_rust_tool "clippy"
  install_rust_tool "racer"
endsection


#
# Tools
#

section "fish"
  if [ ! -e "$HOME/.config/fish/functions/fisher.fish" ]; then
    info "Setting up fisherman..."
    curl https://git.io/fisher -fsSLo "$HOME/.config/fish/functions/fisher.fish"
  fi

  if [ ! "$(getshell)" = 'fish' ]; then
    info "Changing login shell to fish..."
    sudo chsh -s "$(command -v fish)" "$USER"
  fi

  info "Installing/updating fish plugins..."
  fish -c fisher <<FISHFILE
omf/bang-bang
edc/bass
fzf
laughedelic/pisces
pipenv
omf/sudope
z
FISHFILE
endsection


section "Neovim"
  MINPAC="$HOME/.config/nvim/pack/minpac/opt/minpac"
  if [ ! -d "$MINPAC" ]; then
    info "Bootstrapping minpac..."
    mkdir -p "$MINPAC"
    git clone https://github.com/k-takata/minpac "$MINPAC"
  fi

  if ! command -v neovim-node-host >/dev/null; then
    info "Installing Node.js Neovim provider..."
    npm install -g neovim
  fi
  if ! python2 -c "import neovim" 2>/dev/null; then
    info "Installing Python 2 Neovim provider..."
    python2 -m pip install neovim
  fi
  if ! python3 -c "import neovim" 2>/dev/null; then
    info "Installing Python 3 Neovim provider..."
    python3 -m pip install neovim
  fi
  if ! command -v neovim-ruby-host >/dev/null; then
    info "Installing Ruby Neovim provider..."
    gem install neovim
  fi

  install_python_tool neovim-remote
endsection


section "GDB"
  info "Installing/updating GDB dashboard..."
  curl git.io/.gdbinit -fsSLo "$HOME/.gdbinit"
endsection


section "CLI Tools"
  install_rust_tool exa
  install_rust_tool fd-find
  install_go_tool junegunn/fzf
  install_rust_tool hyperfine
  install_go_tool simeji/jid/cmd/jid
  install_python_tool legit
  install_go_tool nishanths/license
  install_rust_tool ripgrep
  install_rust_tool tokei
endsection

printf "\n"
important "Reshimming all asdf installs..."
asdf plugin-list | xargs -I{} asdf reshim {}

important "Done! Restart your shell!"
