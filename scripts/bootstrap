#!/usr/bin/env bash
# shellcheck disable=SC2155

set -e

fancy_echo() {
  printf "\n%s%s%s\n" "$(tput setaf 2)" "$@" "$(tput sgr0)"
}

echo "Bootstrapping environment..."


#
# Environment
#

# asdf
if [ ! -d "$HOME/.asdf" ]; then
  fancy_echo "Installing asdf version manager..."
  git clone https://github.com/asdf-vm/asdf "$HOME/.asdf"
fi
source "$HOME/.asdf/asdf.sh"

install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

install_asdf_language() {
  local language="$1"
  local query="$2"

  local version="$(asdf list-all "$language" | grep -E "$query" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    fancy_echo "Installing $language $version..."
    asdf install "$language" "$version"
  fi

  fancy_echo "Activated $language $version..."
  asdf global "$language" "$version"
}


# asdf plugins
install_asdf_plugin "golang" "https://github.com/kennyp/asdf-golang"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs"
install_asdf_plugin "python" "https://github.com/neersighted/asdf-python"
install_asdf_plugin "ruby" "https://github.com/neersighted/asdf-ruby"

export GNUPGHOME="$HOME/.asdf/keyring"
if [ ! -d "$GNUPGHOME" ]; then
  mkdir -p "$GNUPGHOME"
  chmod 0700 "$GNUPGHOME"
  source "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
fi


# Go
install_asdf_language "golang"

install_go_tool() {
  local target="$1"

  go get -u "github.com/$target"
}


# Node.js
install_asdf_language "nodejs"


# Python
install_asdf_language "python" "^2.[0-9]+.[0-9]+$"
PYTHON2="$(asdf which python)"
install_asdf_language "python" "^3.[0-9]+.[0-9]+$"
PYTHON3="$(asdf which python)"

if ! command -v pipsi >/dev/null; then
  fancy_echo "Installing pipsi..."
  curl http://git.io/get-pipsi -fsSL | python - --src=git+https://github.com/mitsuhiko/pipsi.git
fi

install_python_tool() {
  local target="$1"

  pipsi install "$target" || pipsi upgrade "$target"
}

fancy_echo "Installing/updating Python tools..."
install_python_tool pylint
install_python_tool flake8
install_python_tool mypy
install_python_tool pipenv


# Ruby
install_asdf_language "ruby" "^2.[0-9]+.[0-9]+$"


# Rust
if [ ! -e "$HOME/.cargo/bin/rustup" ]; then
  fancy_echo "Setting up Rust toolchain..."
  curl https://sh.rustup.rs -fsSL | sh -s -- -y --no-modify-path --default-toolchain nightly

  export PATH="$HOME/.cargo/bin:$PATH"
  rustup component add rustfmt-preview rls-preview
fi

install_rust_tool() {
  local target="$1"

  cargo install-update -i "$target" || cargo install "$target"
}

fancy_echo "Installing/updating Rust tools..."
install_rust_tool "cargo-update"
install_rust_tool "cargo-watch"
install_rust_tool "clippy"


#
# Tools
#

# fish
if [ ! -e "$HOME/.config/fish/functions/fisher.fish" ]; then
  fancy_echo "Setting up fisherman..."
  curl https://git.io/fisher -fsSLo "$HOME/.config/fish/functions/fisher.fish"
fi

fancy_echo "Installing/updating fish plugins..."
fish -c fisher <<FISHFILE
rstacruz/fish-asdf
oh-my-fish/plugin-bang-bang
fzf
pipenv
oh-my-fish/plugin-sudope
z
FISHFILE


# Neovim
if ! command -v neovim-node-host >/dev/null; then
  fancy_echo "Installing Node.js Neovim provider..."
  npm install -g neovim
fi
if ! $PYTHON2 -c 'import neovim' 2>/dev/null; then
  fancy_echo "Installing Python 2 Neovim provider..."
  $PYTHON2 -m pip install neovim
fi
if ! $PYTHON3 -c 'import neovim' 2>/dev/null; then
  fancy_echo "Installing Python 3 Neovim provider..."
  $PYTHON3 -m pip install neovim
fi
if ! command -v neovim-ruby-host >/dev/null; then
  fancy_echo "Installing Ruby Neovim provider..."
  gem install neovim
fi
NEOVIM_CONFIG="$HOME/.config/nvim/local.vim"
echo "let g:python3_host_prog = '$PYTHON3'" > "$NEOVIM_CONFIG"
echo "let g:python_host_prog = '$PYTHON2'" >> "$NEOVIM_CONFIG"


# CLI Tools
fancy_echo "Setting up misc tools..."
install_rust_tool fd-find
install_go_tool junegunn/fzf
install_rust_tool pretty-git-prompt
install_rust_tool ripgrep

fancy_echo "Done! Restart your shell!"
