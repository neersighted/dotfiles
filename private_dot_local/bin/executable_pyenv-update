#!/usr/bin/env fish

set_color yellow
echo "Updating pyenv..."
set_color normal

for repo in $PYENV_ROOT $PYENV_ROOT/plugins/*
  git -C $repo pull -q
end

for release in 3.6 3.7 3.8 3.9 3.10
  set latest (pyenv latest -p $release)
  set installed (pyenv latest -P $release)

  if test "$installed" != "$latest"
    set_color yellow
    echo "Installing latest Python $release..."
    set_color normal

    pyenv latest install $release
  end
end

set installed (pipx list --json | jq -r '.venvs[].metadata.main_package.package_or_url')

set wanted \
   pip-run \
   pip-tools \
   poetry \
   'python-lsp-server[all]' \
   shiv 

for spec in $wanted
  if contains -- $spec $installed
    set i (contains -i -- $spec $wanted)
    set -e wanted[$i]
  end
end

if test (count $wanted) -gt 0
  set_color yellow
  echo "Installing Python development apps..."
  set_color normal

  for spec in $wanted
    pipx install "$spec"
  end
end

if test (count $installed) -gt 0
  set_color yellow
  echo "Updating pipx apps..."
  set_color normal

  # specs -> apps
  for app in (string match -r '^[^[]*' $installed)
    pipx upgrade --include-injected "$app"
  end
end

set_color yellow
echo "Updating system packages..."
set_color normal

# allow running pip on global installations
set -eg PIP_REQUIRE_VIRTUALENV

function pip
  command pyenv exec python -m pip --disable-pip-version-check $argv
end

for python in (pyenv versions --bare --skip-aliases)
  set -lx PYENV_VERSION $python

  for spec in (pip list --outdated --format=json | jq -c '.[]')
    set name (jq --argjson spec $spec -nr '$spec | "\(.name)"')
    set current (jq --argjson spec $spec -nr '$spec | "\(.version)"')
    set latest (jq --argjson spec $spec -nr '$spec | "\(.latest_version)"')

    set_color yellow
    echo "Updating $name from $current to $latest ($python)..."
    set_color normal

    pip install -U $name
  end
end
