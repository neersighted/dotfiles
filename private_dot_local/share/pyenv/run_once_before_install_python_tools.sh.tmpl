{{- if lookPath "pyenv" -}}
#!/bin/sh

export PIPX_HOME="${PIPX_HOME:-${XDG_DATA_HOME:-~/.local/share}/pipx}"
export PIPX_BIN_DIR="${PIPX_BIN_DIR:-${PIPX_HOME}/bin}"
export POETRY_HOME="${POETRY_HOME:-${XDG_DATA_HOME:-~/.local/share}/pypoetry}"
export PYENV_ROOT="${PYENV_ROOT:-.}"
export PATH="$PIPX_BIN_DIR:$POETRY_HOME/bin:$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"

if [ ! -x "$POETRY_HOME/venv/bin/python" ]; then
  if [ -x "$POETRY_HOME/venv/bin/poetry" ]; then
    echo "Reinstalling Poetry..."
    rm -rf "$POETRY_HOME"
  else
    echo "Installing Poetry..."
  fi
  curl -sS https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
fi

if ! [ -d "$PYENV_ROOT/versions/$(pyenv version-name)/envs/pipx" ]; then
  if [ -d "$PYENV_ROOT/versions/pipx" ]; then
    echo "Reinstalling pipx..."
    pyenv uninstall pipx
    reinstall=1
  else
    echo "Installing pipx..."
  fi

  pyenv virtualenv pipx
  PYENV_VERSION=pipx python -m pip install -U pip setuptools wheel pipx

  if [ -n "$reinstall" ]; then
    echo "Reinstalling pipx venvs..."
    PYENV_VERSION=pipx python -m pipx reinstall-all
  fi
fi

for spec in black flake8 mypy pip-run pip-tools pylint 'python-lsp-server[all]' shiv twine; do
  tool=$(echo "$spec" | grep -o '^[^[]*')
  test ! -d "$PIPX_HOME/venvs/$tool" || continue

  echo "Installing $tool..."
  PYENV_VERSION=pipx python -m pipx install "$spec"
done

# run_once hash: {{ output "pyenv" "install" "-l" | sha256sum }}
# vi: ft=sh
{{- end -}}
