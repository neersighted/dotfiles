#!/bin/sh

set -e

. lib/env.sh
. lib/install.sh
. lib/logging.sh
. lib/registry.sh
. lib/utils.sh

section "System Packages"
case $(uname) in
  Linux)
    BLD="autoconf automake bison ccache clang cmake fakeroot gcc make pkgconf"
    LIB="libyaml"
    USR="asciinema bat ctags direnv diskus elinks exa fd fish fzf gdb git git-lfs gotop hexyl htop httpie hub hyperfine icdiff jq lftp perl-file-mimeinfo mosh mycli neofetch neovim pgcli ripgrep sd shellcheck socat stow task-spooler tig tmux tokei unzip watchexec whois xdg-utils"

    if ! command -v yay >/dev/null; then
      (
        YAY="${TMPDIR:-/tmp}/yay"
        trap 'rm -rf $YAY' EXIT

        git clone https://aur.archlinux.org/yay.git "$YAY"
        cd "$YAY"
        makepkg -si --noconfirm
      )
    fi

    WRAPPER="sh"
    INSTALL="yay -Sy --noconfirm"
    INSTALLED=$(pacman -Qq)
    ;;
  FreeBSD)
    BLD="automake ccache cmake gcc gmake pkgconf"
    LIB="libffi libyaml ncurses openssl readline sqlite3"
    USR="bash bat coreutils curl direnv exa elinks fd-find fish fzf gdb git git-lfs gnupg gotop hexyl hs-ShellCheck htop hub hyperfine icdiff jq lftp mosh neofetch neovim p5-File-MimeInfo pinentry-curses python python2 python3 py27-httpie py36-asciinema py36-mycli py36-pgcli ripgrep sd socat stow tig tmux tokei ts universal-ctags unzip whois xdg-utils" # missing: hexyl, watchexec

    WRAPPER="su root"
    INSTALL="pkg install -y"
    INSTALLED=$(pkg query '%n')
    ;;
  Darwin)
    BLD="automake ccache cmake pkg-config"
    LIB="gmp gdbm libffi libyaml openssl readline"
    USR="asciinema bat coreutils ctags curl direnv diskus exa fd fish fzf gdb git git-lfs gnupg cjbassi/gotop/gotop hexyl htop httpie hub hyperfine icdiff jq lesspipe lftp mosh mycli neofetch neovim pgcli pinentry-mac ripgrep sd shellcheck socat stow task-spooler tealdeer tmux tokei unzip watchexec xz"

    WRAPPER="sh"
    INSTALL="brew install"
    INSTALLED=$(brew ls -1)
    ;;
  *)
    error "Unsupported operating system."
    ;;
esac
for pkg in $BLD $LIB $USR; do
  pkg=$(basename "$pkg")
  if ! echo "$INSTALLED" | grep -Fwq "$pkg"; then
    PKGS="${PKGS:+$PKGS }$pkg"
  fi
done
if [ -n "$PKGS" ]; then
  if [ -z "$SKIP_PKGS" ]; then
    info "Installing system packages with ${INSTALL%% *}..."

    (
      export GOENV_VERSION=system
      export NODENV_VERSION=system
      export PYENV_VERSION=system
      export RBENV_VERSION=system

      important "$INSTALL $PKGS"

      $WRAPPER -c "$INSTALL $PKGS"
    )
  else
    important "The following system packages are missing:"
    echo "$PKGS"
  fi
fi

section "Language Support"
for support in support/*.sh; do
  if ! echo "$SKIP_LANGUAGES" | grep -Fq "$(stem "$support")"; then
    # shellcheck source=/dev/null
    . "$support"
  fi
done

section "Toolsets"
for toolset in toolset/*.sh; do
  if ! echo "$SKIP_TOOLSETS" | grep -Fq "$(stem "$toolset")"; then
    # shellcheck source=/dev/null
    . "$toolset"
  fi
done

important "Done! Restart your shell!"
